
DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cbc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000dec  08000dec  00010dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e10  08000e10  00010e18  2**0
                  CONTENTS
  4 .ARM          00000000  08000e10  08000e10  00010e18  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e10  08000e18  00010e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e10  08000e10  00010e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e14  08000e14  00010e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000e18  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000e18  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e18  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003344  00000000  00000000  00010e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000083c  00000000  00000000  00014185  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009cc  00000000  00000000  000149c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00015390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  00015538  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000c57  00000000  00000000  00015698  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001d5d  00000000  00000000  000162ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a56b  00000000  00000000  0001804c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000225b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000053c  00000000  00000000  00022634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dd4 	.word	0x08000dd4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000dd4 	.word	0x08000dd4

08000170 <delay_ms>:

#include "lcd.h"
#include"STM32F103C6_GPIO_DRIVER.h"
#include"STM32F103X6.h"

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
			;
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	PINCFG.GPIO_PIN_NUMBER  = RS_SWITCH;
 80001ac:	4b52      	ldr	r3, [pc, #328]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b2:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 80001b4:	4b50      	ldr	r3, [pc, #320]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001b6:	2204      	movs	r2, #4
 80001b8:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 80001ba:	4b4f      	ldr	r3, [pc, #316]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001bc:	2201      	movs	r2, #1
 80001be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 80001c0:	494d      	ldr	r1, [pc, #308]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001c2:	484e      	ldr	r0, [pc, #312]	; (80002fc <LCD_GPIO_init+0x154>)
 80001c4:	f000 fc9f 	bl	8000b06 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = RW_SWITCH;
 80001c8:	4b4b      	ldr	r3, [pc, #300]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001ce:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 80001d0:	4b49      	ldr	r3, [pc, #292]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d2:	2204      	movs	r2, #4
 80001d4:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 80001d6:	4b48      	ldr	r3, [pc, #288]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001d8:	2201      	movs	r2, #1
 80001da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 80001dc:	4946      	ldr	r1, [pc, #280]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001de:	4847      	ldr	r0, [pc, #284]	; (80002fc <LCD_GPIO_init+0x154>)
 80001e0:	f000 fc91 	bl	8000b06 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = EN_SWITCH;
 80001e4:	4b44      	ldr	r3, [pc, #272]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ea:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 80001ec:	4b42      	ldr	r3, [pc, #264]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 80001f2:	4b41      	ldr	r3, [pc, #260]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 80001f8:	493f      	ldr	r1, [pc, #252]	; (80002f8 <LCD_GPIO_init+0x150>)
 80001fa:	4840      	ldr	r0, [pc, #256]	; (80002fc <LCD_GPIO_init+0x154>)
 80001fc:	f000 fc83 	bl	8000b06 <MCAL_GPIO_INIT>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN0;
 8000200:	4b3d      	ldr	r3, [pc, #244]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000202:	2201      	movs	r2, #1
 8000204:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 8000206:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000208:	2204      	movs	r2, #4
 800020a:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 800020c:	4b3a      	ldr	r3, [pc, #232]	; (80002f8 <LCD_GPIO_init+0x150>)
 800020e:	2201      	movs	r2, #1
 8000210:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 8000212:	4939      	ldr	r1, [pc, #228]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000214:	4839      	ldr	r0, [pc, #228]	; (80002fc <LCD_GPIO_init+0x154>)
 8000216:	f000 fc76 	bl	8000b06 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN1;
 800021a:	4b37      	ldr	r3, [pc, #220]	; (80002f8 <LCD_GPIO_init+0x150>)
 800021c:	2202      	movs	r2, #2
 800021e:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 8000220:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000222:	2204      	movs	r2, #4
 8000224:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 8000226:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000228:	2201      	movs	r2, #1
 800022a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 800022c:	4932      	ldr	r1, [pc, #200]	; (80002f8 <LCD_GPIO_init+0x150>)
 800022e:	4833      	ldr	r0, [pc, #204]	; (80002fc <LCD_GPIO_init+0x154>)
 8000230:	f000 fc69 	bl	8000b06 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN2;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000236:	2204      	movs	r2, #4
 8000238:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 800023a:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <LCD_GPIO_init+0x150>)
 800023c:	2204      	movs	r2, #4
 800023e:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000242:	2201      	movs	r2, #1
 8000244:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 8000246:	492c      	ldr	r1, [pc, #176]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000248:	482c      	ldr	r0, [pc, #176]	; (80002fc <LCD_GPIO_init+0x154>)
 800024a:	f000 fc5c 	bl	8000b06 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN3;
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000250:	2208      	movs	r2, #8
 8000252:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 8000254:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000256:	2204      	movs	r2, #4
 8000258:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 800025a:	4b27      	ldr	r3, [pc, #156]	; (80002f8 <LCD_GPIO_init+0x150>)
 800025c:	2201      	movs	r2, #1
 800025e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 8000260:	4925      	ldr	r1, [pc, #148]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000262:	4826      	ldr	r0, [pc, #152]	; (80002fc <LCD_GPIO_init+0x154>)
 8000264:	f000 fc4f 	bl	8000b06 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN4;
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <LCD_GPIO_init+0x150>)
 800026a:	2210      	movs	r2, #16
 800026c:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 800026e:	4b22      	ldr	r3, [pc, #136]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000270:	2204      	movs	r2, #4
 8000272:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000276:	2201      	movs	r2, #1
 8000278:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 800027a:	491f      	ldr	r1, [pc, #124]	; (80002f8 <LCD_GPIO_init+0x150>)
 800027c:	481f      	ldr	r0, [pc, #124]	; (80002fc <LCD_GPIO_init+0x154>)
 800027e:	f000 fc42 	bl	8000b06 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN5;
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000284:	2220      	movs	r2, #32
 8000286:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <LCD_GPIO_init+0x150>)
 800028a:	2204      	movs	r2, #4
 800028c:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 800028e:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000290:	2201      	movs	r2, #1
 8000292:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 8000294:	4918      	ldr	r1, [pc, #96]	; (80002f8 <LCD_GPIO_init+0x150>)
 8000296:	4819      	ldr	r0, [pc, #100]	; (80002fc <LCD_GPIO_init+0x154>)
 8000298:	f000 fc35 	bl	8000b06 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN6;
 800029c:	4b16      	ldr	r3, [pc, #88]	; (80002f8 <LCD_GPIO_init+0x150>)
 800029e:	2240      	movs	r2, #64	; 0x40
 80002a0:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 80002a8:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 80002ae:	4912      	ldr	r1, [pc, #72]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b0:	4812      	ldr	r0, [pc, #72]	; (80002fc <LCD_GPIO_init+0x154>)
 80002b2:	f000 fc28 	bl	8000b06 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN7;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002be:	2204      	movs	r2, #4
 80002c0:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 80002c8:	490b      	ldr	r1, [pc, #44]	; (80002f8 <LCD_GPIO_init+0x150>)
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <LCD_GPIO_init+0x154>)
 80002cc:	f000 fc1b 	bl	8000b06 <MCAL_GPIO_INIT>

	MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d6:	4809      	ldr	r0, [pc, #36]	; (80002fc <LCD_GPIO_init+0x154>)
 80002d8:	f000 fc94 	bl	8000c04 <MCAL_GPIO_WRITEPIN>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <LCD_GPIO_init+0x154>)
 80002e4:	f000 fc8e 	bl	8000c04 <MCAL_GPIO_WRITEPIN>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ee:	4803      	ldr	r0, [pc, #12]	; (80002fc <LCD_GPIO_init+0x154>)
 80002f0:	f000 fc88 	bl	8000c04 <MCAL_GPIO_WRITEPIN>

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000020 	.word	0x20000020
 80002fc:	40010800 	.word	0x40010800

08000300 <LCD_CLEAR_SCREEN>:

void LCD_CLEAR_SCREEN() {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_Clear_Display);
 8000304:	2001      	movs	r0, #1
 8000306:	f000 f85b 	bl	80003c0 <LCD_WRITE_COMMAND>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <LCD_KICK>:

void LCD_KICK() {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <LCD_KICK+0x28>)
 800031c:	f000 fc72 	bl	8000c04 <MCAL_GPIO_WRITEPIN>
	delay_ms(50);
 8000320:	2032      	movs	r0, #50	; 0x32
 8000322:	f7ff ff25 	bl	8000170 <delay_ms>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <LCD_KICK+0x28>)
 800032e:	f000 fc69 	bl	8000c04 <MCAL_GPIO_WRITEPIN>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010800 	.word	0x40010800

0800033c <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	460a      	mov	r2, r1
 8000346:	71fb      	strb	r3, [r7, #7]
 8000348:	4613      	mov	r3, r2
 800034a:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d108      	bne.n	8000364 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000352:	79bb      	ldrb	r3, [r7, #6]
 8000354:	2b0f      	cmp	r3, #15
 8000356:	d805      	bhi.n	8000364 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_ROW1_COLUMN1+ position);
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	3b80      	subs	r3, #128	; 0x80
 800035c:	b2db      	uxtb	r3, r3
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f82e 	bl	80003c0 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	2b02      	cmp	r3, #2
 8000368:	d108      	bne.n	800037c <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 800036a:	79bb      	ldrb	r3, [r7, #6]
 800036c:	2b0f      	cmp	r3, #15
 800036e:	d805      	bhi.n	800037c <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_ROW2_COLUMN2 + position);
 8000370:	79bb      	ldrb	r3, [r7, #6]
 8000372:	3b40      	subs	r3, #64	; 0x40
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f822 	bl	80003c0 <LCD_WRITE_COMMAND>
		}
	}
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <LCD_INIT>:

void LCD_INIT() {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

	delay_ms(20);
 8000388:	2014      	movs	r0, #20
 800038a:	f7ff fef1 	bl	8000170 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 800038e:	f7ff ff0b 	bl	80001a8 <LCD_GPIO_init>

	delay_ms(15);
 8000392:	200f      	movs	r0, #15
 8000394:	f7ff feec 	bl	8000170 <delay_ms>
	LCD_WRITE_COMMAND(LCD_Return_Home);
 8000398:	2002      	movs	r0, #2
 800039a:	f000 f811 	bl	80003c0 <LCD_WRITE_COMMAND>
	LCD_CLEAR_SCREEN();
 800039e:	f7ff ffaf 	bl	8000300 <LCD_CLEAR_SCREEN>
	LCD_WRITE_COMMAND(LCD_8BITS_2LINES_5X8);
 80003a2:	2038      	movs	r0, #56	; 0x38
 80003a4:	f000 f80c 	bl	80003c0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_Enty_Mode_Set_Inc);
 80003a8:	2006      	movs	r0, #6
 80003aa:	f000 f809 	bl	80003c0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ROW1_COLUMN1);
 80003ae:	2080      	movs	r0, #128	; 0x80
 80003b0:	f000 f806 	bl	80003c0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80003b4:	200f      	movs	r0, #15
 80003b6:	f000 f803 	bl	80003c0 <LCD_WRITE_COMMAND>
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WRITEPORT(LCD_CTRL, command);
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	4619      	mov	r1, r3
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <LCD_WRITE_COMMAND+0x40>)
 80003d2:	f000 fc2e 	bl	8000c32 <MCAL_GPIO_WRITEPORT>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003dc:	4808      	ldr	r0, [pc, #32]	; (8000400 <LCD_WRITE_COMMAND+0x40>)
 80003de:	f000 fc11 	bl	8000c04 <MCAL_GPIO_WRITEPIN>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e8:	4805      	ldr	r0, [pc, #20]	; (8000400 <LCD_WRITE_COMMAND+0x40>)
 80003ea:	f000 fc0b 	bl	8000c04 <MCAL_GPIO_WRITEPIN>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80003ee:	2001      	movs	r0, #1
 80003f0:	f7ff febe 	bl	8000170 <delay_ms>
	LCD_KICK();
 80003f4:	f7ff ff8c 	bl	8000310 <LCD_KICK>

}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40010800 	.word	0x40010800

08000404 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WRITEPORT(LCD_CTRL, character);
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	b29b      	uxth	r3, r3
 8000412:	4619      	mov	r1, r3
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <LCD_WRITE_CHAR+0x40>)
 8000416:	f000 fc0c 	bl	8000c32 <MCAL_GPIO_WRITEPORT>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000420:	4808      	ldr	r0, [pc, #32]	; (8000444 <LCD_WRITE_CHAR+0x40>)
 8000422:	f000 fbef 	bl	8000c04 <MCAL_GPIO_WRITEPIN>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800042c:	4805      	ldr	r0, [pc, #20]	; (8000444 <LCD_WRITE_CHAR+0x40>)
 800042e:	f000 fbe9 	bl	8000c04 <MCAL_GPIO_WRITEPIN>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff fe9c 	bl	8000170 <delay_ms>
	LCD_KICK();
 8000438:	f7ff ff6a 	bl	8000310 <LCD_KICK>
}
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40010800 	.word	0x40010800

08000448 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000454:	e01c      	b.n	8000490 <LCD_WRITE_STRING+0x48>
		count++;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3301      	adds	r3, #1
 800045a:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	1c5a      	adds	r2, r3, #1
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff ffcd 	bl	8000404 <LCD_WRITE_CHAR>
		if (count == 16) {
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2b10      	cmp	r3, #16
 800046e:	d104      	bne.n	800047a <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000470:	2100      	movs	r1, #0
 8000472:	2002      	movs	r0, #2
 8000474:	f7ff ff62 	bl	800033c <LCD_GOTO_XY>
 8000478:	e00a      	b.n	8000490 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2b20      	cmp	r3, #32
 800047e:	d107      	bne.n	8000490 <LCD_WRITE_STRING+0x48>
			LCD_CLEAR_SCREEN();
 8000480:	f7ff ff3e 	bl	8000300 <LCD_CLEAR_SCREEN>
			LCD_GOTO_XY(1, 0);
 8000484:	2100      	movs	r1, #0
 8000486:	2001      	movs	r0, #1
 8000488:	f7ff ff58 	bl	800033c <LCD_GOTO_XY>
			count = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1de      	bne.n	8000456 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000498:	bf00      	nop
 800049a:	3710      	adds	r7, #16
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <ENABLE_NVIC>:


//============================================================GENERIC FUNCTIONS====================================================//
//=================================================================================================================================//

void ENABLE_NVIC(uint16_t IRQ){
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 80004aa:	88fb      	ldrh	r3, [r7, #6]
 80004ac:	2b0f      	cmp	r3, #15
 80004ae:	d853      	bhi.n	8000558 <ENABLE_NVIC+0xb8>
 80004b0:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <ENABLE_NVIC+0x18>)
 80004b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b6:	bf00      	nop
 80004b8:	080004f9 	.word	0x080004f9
 80004bc:	08000507 	.word	0x08000507
 80004c0:	08000515 	.word	0x08000515
 80004c4:	08000523 	.word	0x08000523
 80004c8:	08000531 	.word	0x08000531
 80004cc:	0800053f 	.word	0x0800053f
 80004d0:	0800053f 	.word	0x0800053f
 80004d4:	0800053f 	.word	0x0800053f
 80004d8:	0800053f 	.word	0x0800053f
 80004dc:	0800053f 	.word	0x0800053f
 80004e0:	0800054b 	.word	0x0800054b
 80004e4:	0800054b 	.word	0x0800054b
 80004e8:	0800054b 	.word	0x0800054b
 80004ec:	0800054b 	.word	0x0800054b
 80004f0:	0800054b 	.word	0x0800054b
 80004f4:	0800054b 	.word	0x0800054b
	case 0:
		NVIC_IRQ6_EXTI0_ENABLE;
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <ENABLE_NVIC+0xc4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a19      	ldr	r2, [pc, #100]	; (8000564 <ENABLE_NVIC+0xc4>)
 80004fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000502:	6013      	str	r3, [r2, #0]
		break;
 8000504:	e028      	b.n	8000558 <ENABLE_NVIC+0xb8>
	case 1:
		NVIC_IRQ7_EXTI1_ENABLE;
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <ENABLE_NVIC+0xc4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <ENABLE_NVIC+0xc4>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6013      	str	r3, [r2, #0]
		break;
 8000512:	e021      	b.n	8000558 <ENABLE_NVIC+0xb8>
	case 2:
		NVIC_IRQ8_EXTI2_ENABLE;
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <ENABLE_NVIC+0xc4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a12      	ldr	r2, [pc, #72]	; (8000564 <ENABLE_NVIC+0xc4>)
 800051a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800051e:	6013      	str	r3, [r2, #0]
		break;
 8000520:	e01a      	b.n	8000558 <ENABLE_NVIC+0xb8>
	case 3:
		NVIC_IRQ9_EXTI3_ENABLE;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <ENABLE_NVIC+0xc4>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <ENABLE_NVIC+0xc4>)
 8000528:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800052c:	6013      	str	r3, [r2, #0]
		break;
 800052e:	e013      	b.n	8000558 <ENABLE_NVIC+0xb8>
	case 4:
		NVIC_IRQ10_EXTI4_ENABLE;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <ENABLE_NVIC+0xc4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <ENABLE_NVIC+0xc4>)
 8000536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800053a:	6013      	str	r3, [r2, #0]
		break;
 800053c:	e00c      	b.n	8000558 <ENABLE_NVIC+0xb8>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_ENABLE;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <ENABLE_NVIC+0xc4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <ENABLE_NVIC+0xc4>)
 8000544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000548:	6013      	str	r3, [r2, #0]
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_ENABLE;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <ENABLE_NVIC+0xc8>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a06      	ldr	r2, [pc, #24]	; (8000568 <ENABLE_NVIC+0xc8>)
 8000550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000554:	6013      	str	r3, [r2, #0]

	}
}
 8000556:	e7ff      	b.n	8000558 <ENABLE_NVIC+0xb8>
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e000e100 	.word	0xe000e100
 8000568:	e000e104 	.word	0xe000e104

0800056c <DISABLE_NVIC>:

void DISABLE_NVIC(uint16_t IRQ){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d853      	bhi.n	8000624 <DISABLE_NVIC+0xb8>
 800057c:	a201      	add	r2, pc, #4	; (adr r2, 8000584 <DISABLE_NVIC+0x18>)
 800057e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000582:	bf00      	nop
 8000584:	080005c5 	.word	0x080005c5
 8000588:	080005d3 	.word	0x080005d3
 800058c:	080005e1 	.word	0x080005e1
 8000590:	080005ef 	.word	0x080005ef
 8000594:	080005fd 	.word	0x080005fd
 8000598:	0800060b 	.word	0x0800060b
 800059c:	0800060b 	.word	0x0800060b
 80005a0:	0800060b 	.word	0x0800060b
 80005a4:	0800060b 	.word	0x0800060b
 80005a8:	0800060b 	.word	0x0800060b
 80005ac:	08000617 	.word	0x08000617
 80005b0:	08000617 	.word	0x08000617
 80005b4:	08000617 	.word	0x08000617
 80005b8:	08000617 	.word	0x08000617
 80005bc:	08000617 	.word	0x08000617
 80005c0:	08000617 	.word	0x08000617
	case 0:
		NVIC_IRQ6_EXTI0_DISABLE;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <DISABLE_NVIC+0xc4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a19      	ldr	r2, [pc, #100]	; (8000630 <DISABLE_NVIC+0xc4>)
 80005ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ce:	6013      	str	r3, [r2, #0]
		break;
 80005d0:	e028      	b.n	8000624 <DISABLE_NVIC+0xb8>
	case 1:
		NVIC_IRQ7_EXTI1_DISABLE;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <DISABLE_NVIC+0xc4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a16      	ldr	r2, [pc, #88]	; (8000630 <DISABLE_NVIC+0xc4>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6013      	str	r3, [r2, #0]
		break;
 80005de:	e021      	b.n	8000624 <DISABLE_NVIC+0xb8>
	case 2:
		NVIC_IRQ8_EXTI2_DISABLE;
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <DISABLE_NVIC+0xc4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <DISABLE_NVIC+0xc4>)
 80005e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ea:	6013      	str	r3, [r2, #0]
		break;
 80005ec:	e01a      	b.n	8000624 <DISABLE_NVIC+0xb8>
	case 3:
		NVIC_IRQ9_EXTI3_DISABLE;
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <DISABLE_NVIC+0xc4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <DISABLE_NVIC+0xc4>)
 80005f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f8:	6013      	str	r3, [r2, #0]
		break;
 80005fa:	e013      	b.n	8000624 <DISABLE_NVIC+0xb8>
	case 4:
		NVIC_IRQ10_EXTI4_DISABLE;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <DISABLE_NVIC+0xc4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <DISABLE_NVIC+0xc4>)
 8000602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000606:	6013      	str	r3, [r2, #0]
		break;
 8000608:	e00c      	b.n	8000624 <DISABLE_NVIC+0xb8>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_DISABLE;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <DISABLE_NVIC+0xc4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <DISABLE_NVIC+0xc4>)
 8000610:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000614:	6013      	str	r3, [r2, #0]
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_DISABLE;
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <DISABLE_NVIC+0xc8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a06      	ldr	r2, [pc, #24]	; (8000634 <DISABLE_NVIC+0xc8>)
 800061c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000620:	6013      	str	r3, [r2, #0]

	}
}
 8000622:	e7ff      	b.n	8000624 <DISABLE_NVIC+0xb8>
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000e180 	.word	0xe000e180
 8000634:	e000e184 	.word	0xe000e184

08000638 <UPDATE_EXTI>:



void UPDATE_EXTI(EXTI_PINCONFIG_t *EXTI_CONFIG){
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

	//CONFIGURE GPIO TO BE ALTERNATIVE FUNCTION INPUT


	GPIO_PINCONFIG_T PINCFG;
	PINCFG.GPIO_PIN_NUMBER= EXTI_CONFIG->EXTI_PIN.GPIO_PIN;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	891b      	ldrh	r3, [r3, #8]
 8000644:	813b      	strh	r3, [r7, #8]
	PINCFG.GPIO_MODE = GPIO_MODE_FLOATING;
 8000646:	2301      	movs	r3, #1
 8000648:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_INIT(EXTI_CONFIG->EXTI_PIN.GPIO_PORT, &PINCFG);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	f107 0208 	add.w	r2, r7, #8
 8000652:	4611      	mov	r1, r2
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fa56 	bl	8000b06 <MCAL_GPIO_INIT>



	//UPDATE AFIO TP ROUTE BETWEEN EXTI LINE WITH PORT A , B , C , D

	uint8_t AFIO_ECTICR_INDEX = EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM /4 ;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	b29b      	uxth	r3, r3
 8000662:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_ECTICR_POSITION=( EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM % 4) *4 ;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 0303 	and.w	r3, r3, #3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	73bb      	strb	r3, [r7, #14]
	AFIO->EXTICR[AFIO_ECTICR_INDEX] &= ~(0xF <<AFIO_ECTICR_POSITION); 				// TO MAKE ALL BIT IN REGISTER SELECTION EQUALL ZERO
 8000674:	4a5f      	ldr	r2, [pc, #380]	; (80007f4 <UPDATE_EXTI+0x1bc>)
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	3302      	adds	r3, #2
 800067a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	210f      	movs	r1, #15
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	43db      	mvns	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	495a      	ldr	r1, [pc, #360]	; (80007f4 <UPDATE_EXTI+0x1bc>)
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	4002      	ands	r2, r0
 8000690:	3302      	adds	r3, #2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_ECTICR_INDEX] |= ((AFIO_GPIO_EXTI_MAPPING(EXTI_CONFIG->EXTI_PIN.GPIO_PORT)& 0xF) << AFIO_ECTICR_POSITION);
 8000696:	4a57      	ldr	r2, [pc, #348]	; (80007f4 <UPDATE_EXTI+0x1bc>)
 8000698:	7bfb      	ldrb	r3, [r7, #15]
 800069a:	3302      	adds	r3, #2
 800069c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	4954      	ldr	r1, [pc, #336]	; (80007f8 <UPDATE_EXTI+0x1c0>)
 80006a6:	428b      	cmp	r3, r1
 80006a8:	d016      	beq.n	80006d8 <UPDATE_EXTI+0xa0>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	4953      	ldr	r1, [pc, #332]	; (80007fc <UPDATE_EXTI+0x1c4>)
 80006b0:	428b      	cmp	r3, r1
 80006b2:	d00f      	beq.n	80006d4 <UPDATE_EXTI+0x9c>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	4951      	ldr	r1, [pc, #324]	; (8000800 <UPDATE_EXTI+0x1c8>)
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d008      	beq.n	80006d0 <UPDATE_EXTI+0x98>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	4950      	ldr	r1, [pc, #320]	; (8000804 <UPDATE_EXTI+0x1cc>)
 80006c4:	428b      	cmp	r3, r1
 80006c6:	d101      	bne.n	80006cc <UPDATE_EXTI+0x94>
 80006c8:	2303      	movs	r3, #3
 80006ca:	e006      	b.n	80006da <UPDATE_EXTI+0xa2>
 80006cc:	2300      	movs	r3, #0
 80006ce:	e004      	b.n	80006da <UPDATE_EXTI+0xa2>
 80006d0:	2302      	movs	r3, #2
 80006d2:	e002      	b.n	80006da <UPDATE_EXTI+0xa2>
 80006d4:	2301      	movs	r3, #1
 80006d6:	e000      	b.n	80006da <UPDATE_EXTI+0xa2>
 80006d8:	2300      	movs	r3, #0
 80006da:	7bb9      	ldrb	r1, [r7, #14]
 80006dc:	408b      	lsls	r3, r1
 80006de:	4618      	mov	r0, r3
 80006e0:	4944      	ldr	r1, [pc, #272]	; (80007f4 <UPDATE_EXTI+0x1bc>)
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	4302      	orrs	r2, r0
 80006e6:	3302      	adds	r3, #2
 80006e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	//UPDATE RAISING AND FALLING EDGE
	EXTI->RTSR &= ~(1<< EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM); 			//TO MAKE IT EQUALL ZERO
 80006ec:	4b46      	ldr	r3, [pc, #280]	; (8000808 <UPDATE_EXTI+0x1d0>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	8812      	ldrh	r2, [r2, #0]
 80006f4:	4611      	mov	r1, r2
 80006f6:	2201      	movs	r2, #1
 80006f8:	408a      	lsls	r2, r1
 80006fa:	43d2      	mvns	r2, r2
 80006fc:	4611      	mov	r1, r2
 80006fe:	4a42      	ldr	r2, [pc, #264]	; (8000808 <UPDATE_EXTI+0x1d0>)
 8000700:	400b      	ands	r3, r1
 8000702:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<< EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM); 			//TO MAKE IT EQUALL ZERO
 8000704:	4b40      	ldr	r3, [pc, #256]	; (8000808 <UPDATE_EXTI+0x1d0>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	8812      	ldrh	r2, [r2, #0]
 800070c:	4611      	mov	r1, r2
 800070e:	2201      	movs	r2, #1
 8000710:	408a      	lsls	r2, r1
 8000712:	43d2      	mvns	r2, r2
 8000714:	4611      	mov	r1, r2
 8000716:	4a3c      	ldr	r2, [pc, #240]	; (8000808 <UPDATE_EXTI+0x1d0>)
 8000718:	400b      	ands	r3, r1
 800071a:	60d3      	str	r3, [r2, #12]

	if(EXTI_CONFIG->TRIGGER_CASE==EXTI_TRIGGER_RISING){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7b1b      	ldrb	r3, [r3, #12]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10b      	bne.n	800073c <UPDATE_EXTI+0x104>

		EXTI->RTSR |= (1<< EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM);
 8000724:	4b38      	ldr	r3, [pc, #224]	; (8000808 <UPDATE_EXTI+0x1d0>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	8812      	ldrh	r2, [r2, #0]
 800072c:	4611      	mov	r1, r2
 800072e:	2201      	movs	r2, #1
 8000730:	408a      	lsls	r2, r1
 8000732:	4611      	mov	r1, r2
 8000734:	4a34      	ldr	r2, [pc, #208]	; (8000808 <UPDATE_EXTI+0x1d0>)
 8000736:	430b      	orrs	r3, r1
 8000738:	6093      	str	r3, [r2, #8]
 800073a:	e029      	b.n	8000790 <UPDATE_EXTI+0x158>

	}else if(EXTI_CONFIG->TRIGGER_CASE==EXTI_TRIGGER_FALLING){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7b1b      	ldrb	r3, [r3, #12]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d10b      	bne.n	800075c <UPDATE_EXTI+0x124>

		EXTI->FTSR |= (1<< EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM);
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <UPDATE_EXTI+0x1d0>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	8812      	ldrh	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	2201      	movs	r2, #1
 8000750:	408a      	lsls	r2, r1
 8000752:	4611      	mov	r1, r2
 8000754:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <UPDATE_EXTI+0x1d0>)
 8000756:	430b      	orrs	r3, r1
 8000758:	60d3      	str	r3, [r2, #12]
 800075a:	e019      	b.n	8000790 <UPDATE_EXTI+0x158>

	}else if(EXTI_CONFIG->TRIGGER_CASE==EXTI_TRIGGER_RISING_FALLING){
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7b1b      	ldrb	r3, [r3, #12]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d115      	bne.n	8000790 <UPDATE_EXTI+0x158>

		EXTI->RTSR |= (1<< EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM);
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <UPDATE_EXTI+0x1d0>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	8812      	ldrh	r2, [r2, #0]
 800076c:	4611      	mov	r1, r2
 800076e:	2201      	movs	r2, #1
 8000770:	408a      	lsls	r2, r1
 8000772:	4611      	mov	r1, r2
 8000774:	4a24      	ldr	r2, [pc, #144]	; (8000808 <UPDATE_EXTI+0x1d0>)
 8000776:	430b      	orrs	r3, r1
 8000778:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<< EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM);
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <UPDATE_EXTI+0x1d0>)
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	8812      	ldrh	r2, [r2, #0]
 8000782:	4611      	mov	r1, r2
 8000784:	2201      	movs	r2, #1
 8000786:	408a      	lsls	r2, r1
 8000788:	4611      	mov	r1, r2
 800078a:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <UPDATE_EXTI+0x1d0>)
 800078c:	430b      	orrs	r3, r1
 800078e:	60d3      	str	r3, [r2, #12]
	}


	//UPDATE IRQ HANDLING CALLBACK

	GP_IRQ_CALLBACK[EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM] = EXTI_CONFIG->P_IRQ_CALLBACK;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	691b      	ldr	r3, [r3, #16]
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <UPDATE_EXTI+0x1d4>)
 800079c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//ENABLE - DISABLE IRQ
	if(EXTI_CONFIG->IRQ_STATE== EXTI_IRQ_ENABLE){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7b5b      	ldrb	r3, [r3, #13]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d110      	bne.n	80007ca <UPDATE_EXTI+0x192>

		EXTI->IMR |= (1<<EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM);
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <UPDATE_EXTI+0x1d0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	8812      	ldrh	r2, [r2, #0]
 80007b0:	4611      	mov	r1, r2
 80007b2:	2201      	movs	r2, #1
 80007b4:	408a      	lsls	r2, r1
 80007b6:	4611      	mov	r1, r2
 80007b8:	4a13      	ldr	r2, [pc, #76]	; (8000808 <UPDATE_EXTI+0x1d0>)
 80007ba:	430b      	orrs	r3, r1
 80007bc:	6013      	str	r3, [r2, #0]
		ENABLE_NVIC(EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fe6c 	bl	80004a0 <ENABLE_NVIC>
		EXTI->IMR &= ~(1<<EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM);
		DISABLE_NVIC(EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM);

	}

}
 80007c8:	e010      	b.n	80007ec <UPDATE_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM);
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <UPDATE_EXTI+0x1d0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	8812      	ldrh	r2, [r2, #0]
 80007d2:	4611      	mov	r1, r2
 80007d4:	2201      	movs	r2, #1
 80007d6:	408a      	lsls	r2, r1
 80007d8:	43d2      	mvns	r2, r2
 80007da:	4611      	mov	r1, r2
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <UPDATE_EXTI+0x1d0>)
 80007de:	400b      	ands	r3, r1
 80007e0:	6013      	str	r3, [r2, #0]
		DISABLE_NVIC(EXTI_CONFIG->EXTI_PIN.EXTI_INPUT_NUM);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fec0 	bl	800056c <DISABLE_NVIC>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40010000 	.word	0x40010000
 80007f8:	40010800 	.word	0x40010800
 80007fc:	40010c00 	.word	0x40010c00
 8000800:	40011000 	.word	0x40011000
 8000804:	40011400 	.word	0x40011400
 8000808:	40010400 	.word	0x40010400
 800080c:	20000024 	.word	0x20000024

08000810 <MCAL_EXTI_GPIO_INIT>:
 * RETAVAL	 ----> NONE
 * NOTE		 ----> FOR LQFP48 PACKAGE HAS ONLY GPIO A , B AND PART OF C,D
 *
 */

void MCAL_EXTI_GPIO_INIT(EXTI_PINCONFIG_t *EXTI_CONFIG){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	UPDATE_EXTI(EXTI_CONFIG);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff0d 	bl	8000638 <UPDATE_EXTI>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <EXTI0_IRQHandler>:


//============================================================ISR FUNCTION========================================================//
//=======================================================(INTERRUPT SERVICE ROUTINE)======================================================//

void EXTI0_IRQHandler(void){
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

	//CLEAR THE INTERRUPT FROM PENDING REGISTER TO NOT STILL FOUND FOR CPU!!
	EXTI->PR = 1<<0;		//FOR EXTI0
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <EXTI0_IRQHandler+0x14>)
 800082e:	2201      	movs	r2, #1
 8000830:	615a      	str	r2, [r3, #20]

	//CALL IRQ CALLBACK
	GP_IRQ_CALLBACK[0]();
 8000832:	4b03      	ldr	r3, [pc, #12]	; (8000840 <EXTI0_IRQHandler+0x18>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4798      	blx	r3
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40010400 	.word	0x40010400
 8000840:	20000024 	.word	0x20000024

08000844 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

	//CLEAR THE INTERRUPT FROM PENDING REGISTER TO NOT STILL FOUND FOR CPU!!
		EXTI->PR |= (1<<1);		//FOR EXTI1
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <EXTI1_IRQHandler+0x1c>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <EXTI1_IRQHandler+0x1c>)
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	6153      	str	r3, [r2, #20]

		//CALL IRQ CALLBACK
		GP_IRQ_CALLBACK[1]();
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <EXTI1_IRQHandler+0x20>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4798      	blx	r3

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40010400 	.word	0x40010400
 8000864:	20000024 	.word	0x20000024

08000868 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

	//CLEAR THE INTERRUPT FROM PENDING REGISTER TO NOT STILL FOUND FOR CPU!!
		EXTI->PR |= (1<<2);		//FOR EXTI2
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <EXTI2_IRQHandler+0x1c>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <EXTI2_IRQHandler+0x1c>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6153      	str	r3, [r2, #20]

		//CALL IRQ CALLBACK
		GP_IRQ_CALLBACK[2]();
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <EXTI2_IRQHandler+0x20>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4798      	blx	r3

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40010400 	.word	0x40010400
 8000888:	20000024 	.word	0x20000024

0800088c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

	//CLEAR THE INTERRUPT FROM PENDING REGISTER TO NOT STILL FOUND FOR CPU!!
		EXTI->PR |= (1<<3);		//FOR EXTI3
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <EXTI3_IRQHandler+0x1c>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <EXTI3_IRQHandler+0x1c>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	6153      	str	r3, [r2, #20]

		//CALL IRQ CALLBACK
		GP_IRQ_CALLBACK[3]();
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <EXTI3_IRQHandler+0x20>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	4798      	blx	r3

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40010400 	.word	0x40010400
 80008ac:	20000024 	.word	0x20000024

080008b0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

	//CLEAR THE INTERRUPT FROM PENDING REGISTER TO NOT STILL FOUND FOR CPU!!
		EXTI->PR |= (1<<4);		//FOR EXTI4
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <EXTI4_IRQHandler+0x1c>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <EXTI4_IRQHandler+0x1c>)
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	6153      	str	r3, [r2, #20]

		//CALL IRQ CALLBACK
		GP_IRQ_CALLBACK[4]();
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <EXTI4_IRQHandler+0x20>)
 80008c2:	691b      	ldr	r3, [r3, #16]
 80008c4:	4798      	blx	r3


}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40010400 	.word	0x40010400
 80008d0:	20000024 	.word	0x20000024

080008d4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){ EXTI->PR |= (1<<5) ;	GP_IRQ_CALLBACK[5](); }
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	f003 0320 	and.w	r3, r3, #32
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d008      	beq.n	80008f6 <EXTI9_5_IRQHandler+0x22>
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	4a22      	ldr	r2, [pc, #136]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 80008ea:	f043 0320 	orr.w	r3, r3, #32
 80008ee:	6153      	str	r3, [r2, #20]
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <EXTI9_5_IRQHandler+0xa4>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= (1<<6) ;	GP_IRQ_CALLBACK[6](); }
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d008      	beq.n	8000914 <EXTI9_5_IRQHandler+0x40>
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	4a1b      	ldr	r2, [pc, #108]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 8000908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800090c:	6153      	str	r3, [r2, #20]
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <EXTI9_5_IRQHandler+0xa4>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= (1<<7) ;	GP_IRQ_CALLBACK[7](); }
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091c:	2b00      	cmp	r3, #0
 800091e:	d008      	beq.n	8000932 <EXTI9_5_IRQHandler+0x5e>
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	4a13      	ldr	r2, [pc, #76]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 8000926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092a:	6153      	str	r3, [r2, #20]
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <EXTI9_5_IRQHandler+0xa4>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= (1<<8) ;	GP_IRQ_CALLBACK[8](); }
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800093a:	2b00      	cmp	r3, #0
 800093c:	d008      	beq.n	8000950 <EXTI9_5_IRQHandler+0x7c>
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 8000944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <EXTI9_5_IRQHandler+0xa4>)
 800094c:	6a1b      	ldr	r3, [r3, #32]
 800094e:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= (1<<9) ;	GP_IRQ_CALLBACK[9](); }
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000958:	2b00      	cmp	r3, #0
 800095a:	d008      	beq.n	800096e <EXTI9_5_IRQHandler+0x9a>
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <EXTI9_5_IRQHandler+0xa0>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000966:	6153      	str	r3, [r2, #20]
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <EXTI9_5_IRQHandler+0xa4>)
 800096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096c:	4798      	blx	r3
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40010400 	.word	0x40010400
 8000978:	20000024 	.word	0x20000024

0800097c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

	if(EXTI->PR & 1<<10){ EXTI->PR |= (1<<10) ;	GP_IRQ_CALLBACK[10](); }
 8000980:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000988:	2b00      	cmp	r3, #0
 800098a:	d008      	beq.n	800099e <EXTI15_10_IRQHandler+0x22>
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	4a29      	ldr	r2, [pc, #164]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 8000992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000996:	6153      	str	r3, [r2, #20]
 8000998:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <EXTI15_10_IRQHandler+0xc0>)
 800099a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099c:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= (1<<11) ;	GP_IRQ_CALLBACK[11](); }
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d008      	beq.n	80009bc <EXTI15_10_IRQHandler+0x40>
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 80009b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009b4:	6153      	str	r3, [r2, #20]
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <EXTI15_10_IRQHandler+0xc0>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ba:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= (1<<12) ;	GP_IRQ_CALLBACK[12](); }
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d008      	beq.n	80009da <EXTI15_10_IRQHandler+0x5e>
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 80009ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d2:	6153      	str	r3, [r2, #20]
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <EXTI15_10_IRQHandler+0xc0>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= (1<<13) ;	GP_IRQ_CALLBACK[13](); }
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d008      	beq.n	80009f8 <EXTI15_10_IRQHandler+0x7c>
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 80009ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009f0:	6153      	str	r3, [r2, #20]
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <EXTI15_10_IRQHandler+0xc0>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f6:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= (1<<14) ;	GP_IRQ_CALLBACK[14](); }
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d008      	beq.n	8000a16 <EXTI15_10_IRQHandler+0x9a>
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0e:	6153      	str	r3, [r2, #20]
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <EXTI15_10_IRQHandler+0xc0>)
 8000a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a14:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= (1<<15) ;	GP_IRQ_CALLBACK[15](); }
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d008      	beq.n	8000a34 <EXTI15_10_IRQHandler+0xb8>
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <EXTI15_10_IRQHandler+0xbc>)
 8000a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2c:	6153      	str	r3, [r2, #20]
 8000a2e:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <EXTI15_10_IRQHandler+0xc0>)
 8000a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a32:	4798      	blx	r3

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40010400 	.word	0x40010400
 8000a3c:	20000024 	.word	0x20000024

08000a40 <GET_CRLH_POSITION>:
 * PARAM1[IN]----> NUMBER OF PIN
 * RETAVAL	 ----> POSITION IN CR REGISTER
 * NOTE		 ----> EACH PIN HAVE 4 BIT IN CR REGISTER
 *
 */
uint8_t GET_CRLH_POSITION(uint16_t PINNUMBER){
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
	switch(PINNUMBER){
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	2b80      	cmp	r3, #128	; 0x80
 8000a4e:	d042      	beq.n	8000ad6 <GET_CRLH_POSITION+0x96>
 8000a50:	2b80      	cmp	r3, #128	; 0x80
 8000a52:	dc11      	bgt.n	8000a78 <GET_CRLH_POSITION+0x38>
 8000a54:	2b08      	cmp	r3, #8
 8000a56:	d036      	beq.n	8000ac6 <GET_CRLH_POSITION+0x86>
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	dc06      	bgt.n	8000a6a <GET_CRLH_POSITION+0x2a>
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d02e      	beq.n	8000abe <GET_CRLH_POSITION+0x7e>
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d02e      	beq.n	8000ac2 <GET_CRLH_POSITION+0x82>
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d028      	beq.n	8000aba <GET_CRLH_POSITION+0x7a>
 8000a68:	e047      	b.n	8000afa <GET_CRLH_POSITION+0xba>
 8000a6a:	2b20      	cmp	r3, #32
 8000a6c:	d02f      	beq.n	8000ace <GET_CRLH_POSITION+0x8e>
 8000a6e:	2b40      	cmp	r3, #64	; 0x40
 8000a70:	d02f      	beq.n	8000ad2 <GET_CRLH_POSITION+0x92>
 8000a72:	2b10      	cmp	r3, #16
 8000a74:	d029      	beq.n	8000aca <GET_CRLH_POSITION+0x8a>
 8000a76:	e040      	b.n	8000afa <GET_CRLH_POSITION+0xba>
 8000a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a7c:	d033      	beq.n	8000ae6 <GET_CRLH_POSITION+0xa6>
 8000a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a82:	dc09      	bgt.n	8000a98 <GET_CRLH_POSITION+0x58>
 8000a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a88:	d029      	beq.n	8000ade <GET_CRLH_POSITION+0x9e>
 8000a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a8e:	d028      	beq.n	8000ae2 <GET_CRLH_POSITION+0xa2>
 8000a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a94:	d021      	beq.n	8000ada <GET_CRLH_POSITION+0x9a>
 8000a96:	e030      	b.n	8000afa <GET_CRLH_POSITION+0xba>
 8000a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a9c:	d027      	beq.n	8000aee <GET_CRLH_POSITION+0xae>
 8000a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa2:	dc03      	bgt.n	8000aac <GET_CRLH_POSITION+0x6c>
 8000aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aa8:	d01f      	beq.n	8000aea <GET_CRLH_POSITION+0xaa>
 8000aaa:	e026      	b.n	8000afa <GET_CRLH_POSITION+0xba>
 8000aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ab0:	d01f      	beq.n	8000af2 <GET_CRLH_POSITION+0xb2>
 8000ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ab6:	d01e      	beq.n	8000af6 <GET_CRLH_POSITION+0xb6>
 8000ab8:	e01f      	b.n	8000afa <GET_CRLH_POSITION+0xba>

	case GPIO_PIN0:
		return 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e01e      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	e01c      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	e01a      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	e018      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 8000aca:	2310      	movs	r3, #16
 8000acc:	e016      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 8000ace:	2314      	movs	r3, #20
 8000ad0:	e014      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 8000ad2:	2318      	movs	r3, #24
 8000ad4:	e012      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 8000ad6:	231c      	movs	r3, #28
 8000ad8:	e010      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e00e      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	e00c      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 8000ae2:	2308      	movs	r3, #8
 8000ae4:	e00a      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	e008      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 8000aea:	2310      	movs	r3, #16
 8000aec:	e006      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 8000aee:	2314      	movs	r3, #20
 8000af0:	e004      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 8000af2:	2318      	movs	r3, #24
 8000af4:	e002      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 8000af6:	231c      	movs	r3, #28
 8000af8:	e000      	b.n	8000afc <GET_CRLH_POSITION+0xbc>
		break;


	}
	return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <MCAL_GPIO_INIT>:
 * RETAVAL	 ----> NONE
 * NOTE		 ----> NONE
 *
 */

void MCAL_GPIO_INIT(GPIO_Typedef *GPIOx ,GPIO_PINCONFIG_T *PINCONFIG ){
 8000b06:	b590      	push	{r4, r7, lr}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]

	uint8_t PIN_CONFIG=0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]


	//PORT CONFIG REGISTER LOW  (GPIOx_CRL) CONFIGURE PINS [0:7]
	//PORT CONFIG REGISTER HIGH (GPIOx_CRH) CONFIGURE PINS [8:15]

	volatile uint32_t *REGISTERCONFIG=NULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]

	REGISTERCONFIG=(PINCONFIG->GPIO_PIN_NUMBER < GPIO_PIN8)? &GPIOx->CRL : &GPIOx->CRH;	//GPIO POINTING TO CR_LOW IF PIN NUMBER < 8 -->[0:7]
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	2bff      	cmp	r3, #255	; 0xff
 8000b1e:	d801      	bhi.n	8000b24 <MCAL_GPIO_INIT+0x1e>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	e001      	b.n	8000b28 <MCAL_GPIO_INIT+0x22>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3304      	adds	r3, #4
 8000b28:	60bb      	str	r3, [r7, #8]

	//CLEAR CNFy[1:0] & MODEy[1:0]
	(*REGISTERCONFIG) &= ~(0xf << GET_CRLH_POSITION(PINCONFIG->GPIO_PIN_NUMBER));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff86 	bl	8000a40 <GET_CRLH_POSITION>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	230f      	movs	r3, #15
 8000b3a:	4093      	lsls	r3, r2
 8000b3c:	43da      	mvns	r2, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	401a      	ands	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	601a      	str	r2, [r3, #0]

	//CHECK PIN IS OUTPUT TO USE MODE OF SPEED
	if((PINCONFIG->GPIO_MODE == GPIO_MODE_PUSH_PULL) || (PINCONFIG->GPIO_MODE == GPIO_MODE_OPEN_DRAIN) || (PINCONFIG->GPIO_MODE == GPIO_MODE_AF_PUSH_PULL) || (PINCONFIG->GPIO_MODE == GPIO_MODE_AF_OPEN_DRAIN)){
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	789b      	ldrb	r3, [r3, #2]
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	d00b      	beq.n	8000b68 <MCAL_GPIO_INIT+0x62>
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	789b      	ldrb	r3, [r3, #2]
 8000b54:	2b05      	cmp	r3, #5
 8000b56:	d007      	beq.n	8000b68 <MCAL_GPIO_INIT+0x62>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	789b      	ldrb	r3, [r3, #2]
 8000b5c:	2b06      	cmp	r3, #6
 8000b5e:	d003      	beq.n	8000b68 <MCAL_GPIO_INIT+0x62>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	789b      	ldrb	r3, [r3, #2]
 8000b64:	2b07      	cmp	r3, #7
 8000b66:	d10e      	bne.n	8000b86 <MCAL_GPIO_INIT+0x80>

		/*USED -4 BECAUSE THE MODES DEFINED WHEN WE ABSTRACT 4 WE GET THE VALUE SHOULD BE AT REGISTER
		 EXAMBLE USING PUSH PULL MODE FROM MACROS 0x00000004 - 4 = 0x00000000 RHAT WHAT WE WANT ACCORDING SPICS*/

		PIN_CONFIG=((((PINCONFIG->GPIO_MODE - 4) <<2 )|(PINCONFIG->GPIO_SPEED_OUTPUT)) &0x0f);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	3b04      	subs	r3, #4
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	b25a      	sxtb	r2, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	78db      	ldrb	r3, [r3, #3]
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e02c      	b.n	8000be0 <MCAL_GPIO_INIT+0xda>
	}
	//THAT THE PIN IS INPUT & MODE OF SPEED AT RESET STATE
	else{
		if((PINCONFIG->GPIO_MODE==GPIO_MODE_ANALOG) || (PINCONFIG->GPIO_MODE==GPIO_MODE_FLOATING) ){
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <MCAL_GPIO_INIT+0x90>
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	789b      	ldrb	r3, [r3, #2]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d107      	bne.n	8000ba6 <MCAL_GPIO_INIT+0xa0>
			PIN_CONFIG=((((PINCONFIG->GPIO_MODE) <<2 )| 0x0) & 0x0f);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	e01c      	b.n	8000be0 <MCAL_GPIO_INIT+0xda>
		}else if (PINCONFIG->GPIO_MODE == GPIO_MODE_AF_INPUT )		//CONSIDER ALTERNATIVE FUNCTIO AS INPUT FLOATING
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	789b      	ldrb	r3, [r3, #2]
 8000baa:	2b08      	cmp	r3, #8
 8000bac:	d102      	bne.n	8000bb4 <MCAL_GPIO_INIT+0xae>
		{
			PIN_CONFIG=(((GPIO_MODE_AF_INPUT )| 0x0) & 0x0f);
 8000bae:	2308      	movs	r3, #8
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e015      	b.n	8000be0 <MCAL_GPIO_INIT+0xda>

		}
		else  //PULL UP PELL DOWN INPUT MODE
		{
			PIN_CONFIG=(((GPIO_MODE_PULLUP)| 0x0) & 0x0f);
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	73fb      	strb	r3, [r7, #15]
			//FROM TABLE 20 REFERED TO ODR REGISTER IS( 0 @ PULL UP) & (1 @ PULL DOWN)
			if(PINCONFIG->GPIO_MODE == GPIO_MODE_PULLUP)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	789b      	ldrb	r3, [r3, #2]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d107      	bne.n	8000bd0 <MCAL_GPIO_INIT+0xca>
			{
				GPIOx->ODR |= PINCONFIG->GPIO_PIN_NUMBER;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	8812      	ldrh	r2, [r2, #0]
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	e007      	b.n	8000be0 <MCAL_GPIO_INIT+0xda>

			}else {
				GPIOx->ODR &= ~(PINCONFIG->GPIO_PIN_NUMBER);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	8812      	ldrh	r2, [r2, #0]
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	401a      	ands	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	60da      	str	r2, [r3, #12]
			}

		}

	}
	(*REGISTERCONFIG) |= ((PIN_CONFIG) << GET_CRLH_POSITION(PINCONFIG->GPIO_PIN_NUMBER));
 8000be0:	7bfc      	ldrb	r4, [r7, #15]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff2a 	bl	8000a40 <GET_CRLH_POSITION>
 8000bec:	4603      	mov	r3, r0
 8000bee:	fa04 f203 	lsl.w	r2, r4, r3
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	601a      	str	r2, [r3, #0]

}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}

08000c04 <MCAL_GPIO_WRITEPIN>:
 * RETAVAL	 ----> NONE
 * NOTE		 ----> NONE
 *
 */

void MCAL_GPIO_WRITEPIN(GPIO_Typedef *GPIOx ,uint16_t PIN_NUMBER , uint8_t VAL ){
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	807b      	strh	r3, [r7, #2]
 8000c10:	4613      	mov	r3, r2
 8000c12:	707b      	strb	r3, [r7, #1]
	if(VAL != GPIO_PIN_RESET){
 8000c14:	787b      	ldrb	r3, [r7, #1]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <MCAL_GPIO_WRITEPIN+0x1e>
		//GPIOx->ODR |= PIN_NUMBER;
		GPIOx->BSSR = PIN_NUMBER;     	  //0: No action on the corresponding ODRx bit  1: Reset the corresponding ODRx bi
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	611a      	str	r2, [r3, #16]

	}else{
		GPIOx->BRR = PIN_NUMBER;		 //0: No action on the corresponding ODRx bit  1: Reset the corresponding ODRx bi
	}
}
 8000c20:	e002      	b.n	8000c28 <MCAL_GPIO_WRITEPIN+0x24>
		GPIOx->BRR = PIN_NUMBER;		 //0: No action on the corresponding ODRx bit  1: Reset the corresponding ODRx bi
 8000c22:	887a      	ldrh	r2, [r7, #2]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	615a      	str	r2, [r3, #20]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <MCAL_GPIO_WRITEPORT>:
 * RETAVAL	 ----> NONE
 * NOTE		 ----> NONE
 *
 */

void MCAL_GPIO_WRITEPORT(GPIO_Typedef *GPIOx, uint16_t VAL ){
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	807b      	strh	r3, [r7, #2]
		GPIOx->ODR = (uint16_t)VAL;
 8000c3e:	887a      	ldrh	r2, [r7, #2]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	60da      	str	r2, [r3, #12]

}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
	...

08000c50 <Clock_init>:
#include"lcd.h"
#include"STM32F103C6_EXTI_DRIVER.h"

unsigned int IRQ_FLAG=0;

void Clock_init(){
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	//ENABLE CLOCK GPIOA
	RCC_GPIOA_CLK_EN();
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <Clock_init+0x30>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <Clock_init+0x30>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6193      	str	r3, [r2, #24]
	//ENABLE CLOCK GPIOB
	RCC_GPIOB_CLK_EN();
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <Clock_init+0x30>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <Clock_init+0x30>)
 8000c66:	f043 0308 	orr.w	r3, r3, #8
 8000c6a:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN();
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <Clock_init+0x30>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <Clock_init+0x30>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6193      	str	r3, [r2, #24]


}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000

08000c84 <wait_ms>:
void wait_ms(uint32_t time) {
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e00b      	b.n	8000caa <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	e002      	b.n	8000c9e <wait_ms+0x1a>
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	2bfe      	cmp	r3, #254	; 0xfe
 8000ca2:	d9f9      	bls.n	8000c98 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3ef      	bcc.n	8000c92 <wait_ms+0xe>
			;
}
 8000cb2:	bf00      	nop
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <EXTI9_CALLING>:

void EXTI9_CALLING(void){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	IRQ_FLAG=1;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <EXTI9_CALLING+0x1c>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ_EXTI9 IS HAPPEN -|-");
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <EXTI9_CALLING+0x20>)
 8000cc8:	f7ff fbbe 	bl	8000448 <LCD_WRITE_STRING>
	wait_ms(1000);
 8000ccc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd0:	f7ff ffd8 	bl	8000c84 <wait_ms>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000001c 	.word	0x2000001c
 8000cdc:	08000dec 	.word	0x08000dec

08000ce0 <main>:



int main(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
	Clock_init();
 8000ce6:	f7ff ffb3 	bl	8000c50 <Clock_init>
	LCD_INIT();
 8000cea:	f7ff fb4b 	bl	8000384 <LCD_INIT>
	LCD_CLEAR_SCREEN();
 8000cee:	f7ff fb07 	bl	8000300 <LCD_CLEAR_SCREEN>


EXTI_PINCONFIG_t EX;
EX.EXTI_PIN=EXTI9_PB9;
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <main+0x4c>)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cf8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
EX.TRIGGER_CASE=EXTI_TRIGGER_RISING;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	743b      	strb	r3, [r7, #16]
EX.P_IRQ_CALLBACK= EXTI9_CALLING;
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <main+0x50>)
 8000d02:	617b      	str	r3, [r7, #20]
EX.IRQ_STATE=EXTI_IRQ_ENABLE;
 8000d04:	2301      	movs	r3, #1
 8000d06:	747b      	strb	r3, [r7, #17]
MCAL_EXTI_GPIO_INIT(&EX);
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fd80 	bl	8000810 <MCAL_EXTI_GPIO_INIT>
IRQ_FLAG=1;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <main+0x54>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]

	while(1){
		if(IRQ_FLAG){
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <main+0x54>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0fb      	beq.n	8000d16 <main+0x36>
		LCD_CLEAR_SCREEN();
 8000d1e:	f7ff faef 	bl	8000300 <LCD_CLEAR_SCREEN>
		IRQ_FLAG=0;
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <main+0x54>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
		if(IRQ_FLAG){
 8000d28:	e7f5      	b.n	8000d16 <main+0x36>
 8000d2a:	bf00      	nop
 8000d2c:	08000e04 	.word	0x08000e04
 8000d30:	08000cbd 	.word	0x08000cbd
 8000d34:	2000001c 	.word	0x2000001c

08000d38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d3a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d3c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	; (8000d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	; (8000d84 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d66:	f000 f811 	bl	8000d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6a:	f7ff ffb9 	bl	8000ce0 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   r0, =_estack
 8000d70:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d7c:	08000e18 	.word	0x08000e18
  ldr r2, =_sbss
 8000d80:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d84:	20000060 	.word	0x20000060

08000d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_2_IRQHandler>
	...

08000d8c <__libc_init_array>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	2500      	movs	r5, #0
 8000d90:	4e0c      	ldr	r6, [pc, #48]	; (8000dc4 <__libc_init_array+0x38>)
 8000d92:	4c0d      	ldr	r4, [pc, #52]	; (8000dc8 <__libc_init_array+0x3c>)
 8000d94:	1ba4      	subs	r4, r4, r6
 8000d96:	10a4      	asrs	r4, r4, #2
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	d109      	bne.n	8000db0 <__libc_init_array+0x24>
 8000d9c:	f000 f81a 	bl	8000dd4 <_init>
 8000da0:	2500      	movs	r5, #0
 8000da2:	4e0a      	ldr	r6, [pc, #40]	; (8000dcc <__libc_init_array+0x40>)
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <__libc_init_array+0x44>)
 8000da6:	1ba4      	subs	r4, r4, r6
 8000da8:	10a4      	asrs	r4, r4, #2
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d105      	bne.n	8000dba <__libc_init_array+0x2e>
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db4:	4798      	blx	r3
 8000db6:	3501      	adds	r5, #1
 8000db8:	e7ee      	b.n	8000d98 <__libc_init_array+0xc>
 8000dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dbe:	4798      	blx	r3
 8000dc0:	3501      	adds	r5, #1
 8000dc2:	e7f2      	b.n	8000daa <__libc_init_array+0x1e>
 8000dc4:	08000e10 	.word	0x08000e10
 8000dc8:	08000e10 	.word	0x08000e10
 8000dcc:	08000e10 	.word	0x08000e10
 8000dd0:	08000e14 	.word	0x08000e14

08000dd4 <_init>:
 8000dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd6:	bf00      	nop
 8000dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dda:	bc08      	pop	{r3}
 8000ddc:	469e      	mov	lr, r3
 8000dde:	4770      	bx	lr

08000de0 <_fini>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	bf00      	nop
 8000de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de6:	bc08      	pop	{r3}
 8000de8:	469e      	mov	lr, r3
 8000dea:	4770      	bx	lr
