
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000881  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061f  00000000  00000000  00000b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000381  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000384  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000216  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001b2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  7a:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_ENABLE>:
	//LCD_COMMAND(LCD_4BITS_OPERATING2);
	//LCD_COMMAND(LCD_4BITS_2LINES_5X8);
}

void LCD_ENABLE(){
	(*(volatile char *)(COMMAND))	|=	(1<<E);		//SET ENABLE START HIGH TO LOW
  82:	85 b3       	in	r24, 0x15	; 21
  84:	82 60       	ori	r24, 0x02	; 2
  86:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	89 ef       	ldi	r24, 0xF9	; 249
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_ENABLE+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_ENABLE+0x10>
  92:	00 00       	nop
	_delay_ms(1);
	(*(volatile char *)(COMMAND))	&=	~(1<<E);	//RESET ENAPLE END 
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8d 7f       	andi	r24, 0xFD	; 253
  98:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	91 e2       	ldi	r25, 0x21	; 33
  9c:	9a 95       	dec	r25
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_ENABLE+0x1a>
  a0:	00 00       	nop
  a2:	08 95       	ret

000000a4 <LCD_COMMAND>:
		LCD_4BITS_MODE();
	}
	DISPLAY_ON();
	LCD_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}
void LCD_COMMAND(char cmd){
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
	(*(volatile char *)(COMMAND))	&= ~(1<<RS);	//RESET REGISTER SELECT FOR COMMAND WRITE
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	8b 7f       	andi	r24, 0xFB	; 251
  ac:	85 bb       	out	0x15, r24	; 21
	if (MODE==8)
	{
		(*(volatile char *)(DATA))= cmd;		//DATA PINS EQUAL COMMAND
	}
	else if(MODE==4){
		(*(volatile char *)(DATA))= (cmd & 0xf0);		//SEND HIGH NIBBLE TO D4:D7
  ae:	8c 2f       	mov	r24, r28
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	8b bb       	out	0x1b, r24	; 27
		LCD_ENABLE();
  b4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_ENABLE>
		(*(volatile char *)(DATA))=(cmd<<4);			//SEND LOW NIBBLE TO D4:D7
  b8:	c2 95       	swap	r28
  ba:	c0 7f       	andi	r28, 0xF0	; 240
  bc:	cb bb       	out	0x1b, r28	; 27
	 
}
	LCD_ENABLE();
  be:	0e 94 41 00 	call	0x82	; 0x82 <LCD_ENABLE>
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <DISPLAY_ON>:
 */ 

#include "LCD_DRIVER.h"
void DISPLAY_ON(){
	
	LCD_COMMAND(LCD_Clear_Display);
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_COMMAND>
  cc:	83 ef       	ldi	r24, 0xF3	; 243
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <DISPLAY_ON+0xa>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <DISPLAY_ON+0x10>
  d6:	00 00       	nop
	_delay_us(2000);
	LCD_COMMAND(LCD_Enty_Mode_Set_Inc);
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_COMMAND>
  de:	08 95       	ret

000000e0 <LCD_4BITS_MODE>:
	
}
void LCD_4BITS_MODE(){
	LCD_COMMAND(LCD_Return_Home);
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_COMMAND>
	LCD_COMMAND(LCD_4BITS_2LINES_5X8);
  e6:	88 e2       	ldi	r24, 0x28	; 40
  e8:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_COMMAND>
  ec:	08 95       	ret

000000ee <LCD_INIT>:
	_delay_ms(1);
	(*(volatile char *)(COMMAND))	&=	~(1<<E);	//RESET ENAPLE END 
	_delay_us(100);
}
volatile void LCD_INIT(){
	(*(volatile char *)(DATA-1))=PORT_OUTPUT;		//DDR THE DATA AS OUTPUT
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8a bb       	out	0x1a, r24	; 26
	(*(volatile char *)(COMMAND-1))=PORT_OUTPUT;	//DDR THE COMMAND AS OUTPUT
  f2:	84 bb       	out	0x14, r24	; 20
	//(*(volatile char *)(DATA-2))=0X00;				//DATA PORT IS INIT FROM GARBAGE & DATA REGISTER WHICH USED AS 1 OR 0 
	(*(volatile char *)(COMMAND))&= ~(1<<E);		//RESET E PIN
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	8d 7f       	andi	r24, 0xFD	; 253
  f8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	8f e4       	ldi	r24, 0x4F	; 79
  fc:	93 ec       	ldi	r25, 0xC3	; 195
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_INIT+0x10>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_INIT+0x16>
 104:	00 00       	nop
	}
	else if (MODE==4)
	{
		_delay_ms(200);
		
		LCD_4BITS_MODE();
 106:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_4BITS_MODE>
	}
	DISPLAY_ON();
 10a:	0e 94 63 00 	call	0xc6	; 0xc6 <DISPLAY_ON>
	LCD_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_COMMAND>
 114:	08 95       	ret

00000116 <LCD_OUT>:
		(*(volatile char *)(DATA))=(cmd<<4);			//SEND LOW NIBBLE TO D4:D7
	 
}
	LCD_ENABLE();
}
void LCD_OUT(unsigned char val){
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
	(*(volatile char *)(DATA)) |= (1<<RS)	;	//SET REGISTER SELECT FOR DATA WRITE
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	8b bb       	out	0x1b, r24	; 27
	if(MODE==8){
		(*(volatile char *)(DATA))=val;	
	}
	else if (MODE==4)
	{
		(*(volatile char *)(DATA))= (val & 0xf0);		//SEND HIGH NIBBLE TO D4:D7
 120:	8c 2f       	mov	r24, r28
 122:	80 7f       	andi	r24, 0xF0	; 240
 124:	8b bb       	out	0x1b, r24	; 27
		(*(volatile char *)(COMMAND)) |= (1<<RS);
 126:	85 b3       	in	r24, 0x15	; 21
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	85 bb       	out	0x15, r24	; 21
		LCD_ENABLE();
 12c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_ENABLE>
		(*(volatile char *)(DATA))=(val<<4);
 130:	c2 95       	swap	r28
 132:	c0 7f       	andi	r28, 0xF0	; 240
 134:	cb bb       	out	0x1b, r28	; 27
	}
	LCD_ENABLE();
 136:	0e 94 41 00 	call	0x82	; 0x82 <LCD_ENABLE>
}
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <LCD_PRINT>:
void LCD_PRINT(char * str){
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	8c 01       	movw	r16, r24
	unsigned char i=0;		
 146:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i]!=0){		//NULL VALUE AS END OF STRING ARRAY
 148:	03 c0       	rjmp	.+6      	; 0x150 <LCD_PRINT+0x12>
		LCD_OUT(str[i]);
 14a:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_OUT>
		i++;
 14e:	cf 5f       	subi	r28, 0xFF	; 255
	}
	LCD_ENABLE();
}
void LCD_PRINT(char * str){
	unsigned char i=0;		
	while(str[i]!=0){		//NULL VALUE AS END OF STRING ARRAY
 150:	f8 01       	movw	r30, r16
 152:	ec 0f       	add	r30, r28
 154:	f1 1d       	adc	r31, r1
 156:	80 81       	ld	r24, Z
 158:	81 11       	cpse	r24, r1
 15a:	f7 cf       	rjmp	.-18     	; 0x14a <LCD_PRINT+0xc>
		LCD_OUT(str[i]);
		i++;
	}
}
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <main>:
int main(void){

	LCD_INIT();
 164:	0e 94 77 00 	call	0xee	; 0xee <LCD_INIT>
	LCD_PRINT("andrew");
 168:	80 e6       	ldi	r24, 0x60	; 96
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_PRINT>
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0xc>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
