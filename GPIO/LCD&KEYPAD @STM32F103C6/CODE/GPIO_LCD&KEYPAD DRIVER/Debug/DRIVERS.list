
DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ab0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000be0  08000be0  00010be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c0c  08000c0c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000c0c  08000c0c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c0c  08000c0c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c10  08000c10  00010c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000c34  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000c34  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003075  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000080c  00000000  00000000  000230be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007cc  00000000  00000000  000238ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000158  00000000  00000000  00024098  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  000241f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000271f  00000000  00000000  00024300  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001c66  00000000  00000000  00026a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008d69  00000000  00000000  00028685  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000313ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000414  00000000  00000000  0003146c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bc8 	.word	0x08000bc8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000bc8 	.word	0x08000bc8

08000170 <Keypad_init>:
	for (i = 0; i < time; i++)
		for (j = 0; j < 255; j++)
			;
}

void Keypad_init() {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	GPIO_PINCONFIG_T PINCFG ;

	PINCFG.GPIO_PIN_NUMBER = R0;
 8000176:	2301      	movs	r3, #1
 8000178:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE=GPIO_MODE_PUSH_PULL;
 800017a:	2304      	movs	r3, #4
 800017c:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 800017e:	2301      	movs	r3, #1
 8000180:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PINCFG);
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	4619      	mov	r1, r3
 8000186:	482c      	ldr	r0, [pc, #176]	; (8000238 <Keypad_init+0xc8>)
 8000188:	f000 fb1d 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER = R1;
 800018c:	2302      	movs	r3, #2
 800018e:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE =GPIO_MODE_PUSH_PULL;
 8000190:	2304      	movs	r3, #4
 8000192:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 8000194:	2301      	movs	r3, #1
 8000196:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PINCFG);
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	4619      	mov	r1, r3
 800019c:	4826      	ldr	r0, [pc, #152]	; (8000238 <Keypad_init+0xc8>)
 800019e:	f000 fb12 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER = R2;
 80001a2:	2308      	movs	r3, #8
 80001a4:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE =GPIO_MODE_PUSH_PULL;
 80001a6:	2304      	movs	r3, #4
 80001a8:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 80001aa:	2301      	movs	r3, #1
 80001ac:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PINCFG);
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4619      	mov	r1, r3
 80001b2:	4821      	ldr	r0, [pc, #132]	; (8000238 <Keypad_init+0xc8>)
 80001b4:	f000 fb07 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER = R3;
 80001b8:	2310      	movs	r3, #16
 80001ba:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE =GPIO_MODE_PUSH_PULL;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PINCFG);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	481b      	ldr	r0, [pc, #108]	; (8000238 <Keypad_init+0xc8>)
 80001ca:	f000 fafc 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER = C0;
 80001ce:	2320      	movs	r3, #32
 80001d0:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE =GPIO_MODE_PUSH_PULL;
 80001d2:	2304      	movs	r3, #4
 80001d4:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 80001d6:	2301      	movs	r3, #1
 80001d8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PINCFG);
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	4619      	mov	r1, r3
 80001de:	4816      	ldr	r0, [pc, #88]	; (8000238 <Keypad_init+0xc8>)
 80001e0:	f000 faf1 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER = C1;
 80001e4:	2340      	movs	r3, #64	; 0x40
 80001e6:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE =GPIO_MODE_PUSH_PULL;
 80001e8:	2304      	movs	r3, #4
 80001ea:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 80001ec:	2301      	movs	r3, #1
 80001ee:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PINCFG);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	4619      	mov	r1, r3
 80001f4:	4810      	ldr	r0, [pc, #64]	; (8000238 <Keypad_init+0xc8>)
 80001f6:	f000 fae6 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER = C2;
 80001fa:	2380      	movs	r3, #128	; 0x80
 80001fc:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE =GPIO_MODE_PUSH_PULL;
 80001fe:	2304      	movs	r3, #4
 8000200:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 8000202:	2301      	movs	r3, #1
 8000204:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PINCFG);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4619      	mov	r1, r3
 800020a:	480b      	ldr	r0, [pc, #44]	; (8000238 <Keypad_init+0xc8>)
 800020c:	f000 fadb 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER = C3;
 8000210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000214:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE =GPIO_MODE_PUSH_PULL;
 8000216:	2304      	movs	r3, #4
 8000218:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 800021a:	2301      	movs	r3, #1
 800021c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(KEYPAD_PORT, &PINCFG);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4619      	mov	r1, r3
 8000222:	4805      	ldr	r0, [pc, #20]	; (8000238 <Keypad_init+0xc8>)
 8000224:	f000 facf 	bl	80007c6 <MCAL_GPIO_INIT>
	MCAL_GPIO_WRITEPORT(KEYPAD_PORT, 0xFF);
 8000228:	21ff      	movs	r1, #255	; 0xff
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <Keypad_init+0xc8>)
 800022c:	f000 fb78 	bl	8000920 <MCAL_GPIO_WRITEPORT>

}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40010c00 	.word	0x40010c00

0800023c <Keypad_getkey>:

char Keypad_getkey() {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
	int i, j;
	for (i = 0; i < 4; i++) {
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e0b4      	b.n	80003b2 <Keypad_getkey+0x176>

		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 8000248:	4b5e      	ldr	r3, [pc, #376]	; (80003c4 <Keypad_getkey+0x188>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	2201      	movs	r2, #1
 8000250:	4619      	mov	r1, r3
 8000252:	485d      	ldr	r0, [pc, #372]	; (80003c8 <Keypad_getkey+0x18c>)
 8000254:	f000 fb4d 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 8000258:	4b5a      	ldr	r3, [pc, #360]	; (80003c4 <Keypad_getkey+0x188>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	2201      	movs	r2, #1
 8000260:	4619      	mov	r1, r3
 8000262:	4859      	ldr	r0, [pc, #356]	; (80003c8 <Keypad_getkey+0x18c>)
 8000264:	f000 fb45 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 8000268:	4b56      	ldr	r3, [pc, #344]	; (80003c4 <Keypad_getkey+0x188>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	b29b      	uxth	r3, r3
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	4855      	ldr	r0, [pc, #340]	; (80003c8 <Keypad_getkey+0x18c>)
 8000274:	f000 fb3d 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 8000278:	4b52      	ldr	r3, [pc, #328]	; (80003c4 <Keypad_getkey+0x188>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	4851      	ldr	r0, [pc, #324]	; (80003c8 <Keypad_getkey+0x18c>)
 8000284:	f000 fb35 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
		MCAL_GPIO_WRITEPIN(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 8000288:	4a4e      	ldr	r2, [pc, #312]	; (80003c4 <Keypad_getkey+0x188>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	b29b      	uxth	r3, r3
 8000292:	2200      	movs	r2, #0
 8000294:	4619      	mov	r1, r3
 8000296:	484c      	ldr	r0, [pc, #304]	; (80003c8 <Keypad_getkey+0x18c>)
 8000298:	f000 fb2b 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
		for (j = 0; j < 4; j++) {
 800029c:	2300      	movs	r3, #0
 800029e:	603b      	str	r3, [r7, #0]
 80002a0:	e080      	b.n	80003a4 <Keypad_getkey+0x168>
			if (MCAL_GPIO_READPIN(KEYPAD_PORT, Key_padRow[j]) == 0) {
 80002a2:	4a4a      	ldr	r2, [pc, #296]	; (80003cc <Keypad_getkey+0x190>)
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	4619      	mov	r1, r3
 80002ae:	4846      	ldr	r0, [pc, #280]	; (80003c8 <Keypad_getkey+0x18c>)
 80002b0:	f000 fb08 	bl	80008c4 <MCAL_GPIO_READPIN>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d171      	bne.n	800039e <Keypad_getkey+0x162>
				while (MCAL_GPIO_READPIN(KEYPAD_PORT, Key_padRow[j]) == 0)
 80002ba:	bf00      	nop
 80002bc:	4a43      	ldr	r2, [pc, #268]	; (80003cc <Keypad_getkey+0x190>)
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	4619      	mov	r1, r3
 80002c8:	483f      	ldr	r0, [pc, #252]	; (80003c8 <Keypad_getkey+0x18c>)
 80002ca:	f000 fafb 	bl	80008c4 <MCAL_GPIO_READPIN>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f3      	beq.n	80002bc <Keypad_getkey+0x80>
					;
				switch (i) {
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	d861      	bhi.n	800039e <Keypad_getkey+0x162>
 80002da:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <Keypad_getkey+0xa4>)
 80002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e0:	080002f1 	.word	0x080002f1
 80002e4:	08000319 	.word	0x08000319
 80002e8:	08000341 	.word	0x08000341
 80002ec:	08000369 	.word	0x08000369
				case (0):
					if (j == 0)
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d101      	bne.n	80002fa <Keypad_getkey+0xbe>
						return '7';
 80002f6:	2337      	movs	r3, #55	; 0x37
 80002f8:	e060      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d101      	bne.n	8000304 <Keypad_getkey+0xc8>
						return '4';
 8000300:	2334      	movs	r3, #52	; 0x34
 8000302:	e05b      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	2b02      	cmp	r3, #2
 8000308:	d101      	bne.n	800030e <Keypad_getkey+0xd2>
						return '1';
 800030a:	2331      	movs	r3, #49	; 0x31
 800030c:	e056      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d13d      	bne.n	8000390 <Keypad_getkey+0x154>
						return '?';
 8000314:	233f      	movs	r3, #63	; 0x3f
 8000316:	e051      	b.n	80003bc <Keypad_getkey+0x180>
					break;
				case (1):
					if (j == 0)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <Keypad_getkey+0xe6>
						return '8';
 800031e:	2338      	movs	r3, #56	; 0x38
 8000320:	e04c      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d101      	bne.n	800032c <Keypad_getkey+0xf0>
						return '5';
 8000328:	2335      	movs	r3, #53	; 0x35
 800032a:	e047      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	2b02      	cmp	r3, #2
 8000330:	d101      	bne.n	8000336 <Keypad_getkey+0xfa>
						return '2';
 8000332:	2332      	movs	r3, #50	; 0x32
 8000334:	e042      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d12b      	bne.n	8000394 <Keypad_getkey+0x158>
						return '0';
 800033c:	2330      	movs	r3, #48	; 0x30
 800033e:	e03d      	b.n	80003bc <Keypad_getkey+0x180>
					break;
				case (2):
					if (j == 0)
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d101      	bne.n	800034a <Keypad_getkey+0x10e>
						return '9';
 8000346:	2339      	movs	r3, #57	; 0x39
 8000348:	e038      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d101      	bne.n	8000354 <Keypad_getkey+0x118>
						return '6';
 8000350:	2336      	movs	r3, #54	; 0x36
 8000352:	e033      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d101      	bne.n	800035e <Keypad_getkey+0x122>
						return '3';
 800035a:	2333      	movs	r3, #51	; 0x33
 800035c:	e02e      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d119      	bne.n	8000398 <Keypad_getkey+0x15c>
						return '=';
 8000364:	233d      	movs	r3, #61	; 0x3d
 8000366:	e029      	b.n	80003bc <Keypad_getkey+0x180>
					break;
				case (3):
					if (j == 0)
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <Keypad_getkey+0x136>
						return '/';
 800036e:	232f      	movs	r3, #47	; 0x2f
 8000370:	e024      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d101      	bne.n	800037c <Keypad_getkey+0x140>
						return '*';
 8000378:	232a      	movs	r3, #42	; 0x2a
 800037a:	e01f      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	2b02      	cmp	r3, #2
 8000380:	d101      	bne.n	8000386 <Keypad_getkey+0x14a>
						return '-';
 8000382:	232d      	movs	r3, #45	; 0x2d
 8000384:	e01a      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d107      	bne.n	800039c <Keypad_getkey+0x160>
						return '+';
 800038c:	232b      	movs	r3, #43	; 0x2b
 800038e:	e015      	b.n	80003bc <Keypad_getkey+0x180>
					break;
 8000390:	bf00      	nop
 8000392:	e004      	b.n	800039e <Keypad_getkey+0x162>
					break;
 8000394:	bf00      	nop
 8000396:	e002      	b.n	800039e <Keypad_getkey+0x162>
					break;
 8000398:	bf00      	nop
 800039a:	e000      	b.n	800039e <Keypad_getkey+0x162>
					break;
 800039c:	bf00      	nop
		for (j = 0; j < 4; j++) {
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	3301      	adds	r3, #1
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	2b03      	cmp	r3, #3
 80003a8:	f77f af7b 	ble.w	80002a2 <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++) {
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3301      	adds	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	f77f af47 	ble.w	8000248 <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 80003ba:	2341      	movs	r3, #65	; 0x41
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000010 	.word	0x20000010
 80003c8:	40010c00 	.word	0x40010c00
 80003cc:	20000000 	.word	0x20000000

080003d0 <delay_ms>:

#include "lcd.h"
#include"STM32F103C6_GPIO_DRIVER.h"
#include"STM32F103X6.h"

void delay_ms(uint32_t time) {
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	e00b      	b.n	80003f6 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	e002      	b.n	80003ea <delay_ms+0x1a>
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	3301      	adds	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	2bfe      	cmp	r3, #254	; 0xfe
 80003ee:	d9f9      	bls.n	80003e4 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3301      	adds	r3, #1
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d3ef      	bcc.n	80003de <delay_ms+0xe>
			;
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	PINCFG.GPIO_PIN_NUMBER  = RS_SWITCH;
 800040c:	4b52      	ldr	r3, [pc, #328]	; (8000558 <LCD_GPIO_init+0x150>)
 800040e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000412:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 8000414:	4b50      	ldr	r3, [pc, #320]	; (8000558 <LCD_GPIO_init+0x150>)
 8000416:	2204      	movs	r2, #4
 8000418:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 800041a:	4b4f      	ldr	r3, [pc, #316]	; (8000558 <LCD_GPIO_init+0x150>)
 800041c:	2201      	movs	r2, #1
 800041e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 8000420:	494d      	ldr	r1, [pc, #308]	; (8000558 <LCD_GPIO_init+0x150>)
 8000422:	484e      	ldr	r0, [pc, #312]	; (800055c <LCD_GPIO_init+0x154>)
 8000424:	f000 f9cf 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = RW_SWITCH;
 8000428:	4b4b      	ldr	r3, [pc, #300]	; (8000558 <LCD_GPIO_init+0x150>)
 800042a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800042e:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 8000430:	4b49      	ldr	r3, [pc, #292]	; (8000558 <LCD_GPIO_init+0x150>)
 8000432:	2204      	movs	r2, #4
 8000434:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 8000436:	4b48      	ldr	r3, [pc, #288]	; (8000558 <LCD_GPIO_init+0x150>)
 8000438:	2201      	movs	r2, #1
 800043a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 800043c:	4946      	ldr	r1, [pc, #280]	; (8000558 <LCD_GPIO_init+0x150>)
 800043e:	4847      	ldr	r0, [pc, #284]	; (800055c <LCD_GPIO_init+0x154>)
 8000440:	f000 f9c1 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = EN_SWITCH;
 8000444:	4b44      	ldr	r3, [pc, #272]	; (8000558 <LCD_GPIO_init+0x150>)
 8000446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800044a:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 800044c:	4b42      	ldr	r3, [pc, #264]	; (8000558 <LCD_GPIO_init+0x150>)
 800044e:	2204      	movs	r2, #4
 8000450:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 8000452:	4b41      	ldr	r3, [pc, #260]	; (8000558 <LCD_GPIO_init+0x150>)
 8000454:	2201      	movs	r2, #1
 8000456:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 8000458:	493f      	ldr	r1, [pc, #252]	; (8000558 <LCD_GPIO_init+0x150>)
 800045a:	4840      	ldr	r0, [pc, #256]	; (800055c <LCD_GPIO_init+0x154>)
 800045c:	f000 f9b3 	bl	80007c6 <MCAL_GPIO_INIT>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN0;
 8000460:	4b3d      	ldr	r3, [pc, #244]	; (8000558 <LCD_GPIO_init+0x150>)
 8000462:	2201      	movs	r2, #1
 8000464:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 8000466:	4b3c      	ldr	r3, [pc, #240]	; (8000558 <LCD_GPIO_init+0x150>)
 8000468:	2204      	movs	r2, #4
 800046a:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 800046c:	4b3a      	ldr	r3, [pc, #232]	; (8000558 <LCD_GPIO_init+0x150>)
 800046e:	2201      	movs	r2, #1
 8000470:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 8000472:	4939      	ldr	r1, [pc, #228]	; (8000558 <LCD_GPIO_init+0x150>)
 8000474:	4839      	ldr	r0, [pc, #228]	; (800055c <LCD_GPIO_init+0x154>)
 8000476:	f000 f9a6 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN1;
 800047a:	4b37      	ldr	r3, [pc, #220]	; (8000558 <LCD_GPIO_init+0x150>)
 800047c:	2202      	movs	r2, #2
 800047e:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 8000480:	4b35      	ldr	r3, [pc, #212]	; (8000558 <LCD_GPIO_init+0x150>)
 8000482:	2204      	movs	r2, #4
 8000484:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 8000486:	4b34      	ldr	r3, [pc, #208]	; (8000558 <LCD_GPIO_init+0x150>)
 8000488:	2201      	movs	r2, #1
 800048a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 800048c:	4932      	ldr	r1, [pc, #200]	; (8000558 <LCD_GPIO_init+0x150>)
 800048e:	4833      	ldr	r0, [pc, #204]	; (800055c <LCD_GPIO_init+0x154>)
 8000490:	f000 f999 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN2;
 8000494:	4b30      	ldr	r3, [pc, #192]	; (8000558 <LCD_GPIO_init+0x150>)
 8000496:	2204      	movs	r2, #4
 8000498:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 800049a:	4b2f      	ldr	r3, [pc, #188]	; (8000558 <LCD_GPIO_init+0x150>)
 800049c:	2204      	movs	r2, #4
 800049e:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 80004a0:	4b2d      	ldr	r3, [pc, #180]	; (8000558 <LCD_GPIO_init+0x150>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 80004a6:	492c      	ldr	r1, [pc, #176]	; (8000558 <LCD_GPIO_init+0x150>)
 80004a8:	482c      	ldr	r0, [pc, #176]	; (800055c <LCD_GPIO_init+0x154>)
 80004aa:	f000 f98c 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN3;
 80004ae:	4b2a      	ldr	r3, [pc, #168]	; (8000558 <LCD_GPIO_init+0x150>)
 80004b0:	2208      	movs	r2, #8
 80004b2:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 80004b4:	4b28      	ldr	r3, [pc, #160]	; (8000558 <LCD_GPIO_init+0x150>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 80004ba:	4b27      	ldr	r3, [pc, #156]	; (8000558 <LCD_GPIO_init+0x150>)
 80004bc:	2201      	movs	r2, #1
 80004be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 80004c0:	4925      	ldr	r1, [pc, #148]	; (8000558 <LCD_GPIO_init+0x150>)
 80004c2:	4826      	ldr	r0, [pc, #152]	; (800055c <LCD_GPIO_init+0x154>)
 80004c4:	f000 f97f 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN4;
 80004c8:	4b23      	ldr	r3, [pc, #140]	; (8000558 <LCD_GPIO_init+0x150>)
 80004ca:	2210      	movs	r2, #16
 80004cc:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 80004ce:	4b22      	ldr	r3, [pc, #136]	; (8000558 <LCD_GPIO_init+0x150>)
 80004d0:	2204      	movs	r2, #4
 80004d2:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 80004d4:	4b20      	ldr	r3, [pc, #128]	; (8000558 <LCD_GPIO_init+0x150>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 80004da:	491f      	ldr	r1, [pc, #124]	; (8000558 <LCD_GPIO_init+0x150>)
 80004dc:	481f      	ldr	r0, [pc, #124]	; (800055c <LCD_GPIO_init+0x154>)
 80004de:	f000 f972 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN5;
 80004e2:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <LCD_GPIO_init+0x150>)
 80004e4:	2220      	movs	r2, #32
 80004e6:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <LCD_GPIO_init+0x150>)
 80004ea:	2204      	movs	r2, #4
 80004ec:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <LCD_GPIO_init+0x150>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 80004f4:	4918      	ldr	r1, [pc, #96]	; (8000558 <LCD_GPIO_init+0x150>)
 80004f6:	4819      	ldr	r0, [pc, #100]	; (800055c <LCD_GPIO_init+0x154>)
 80004f8:	f000 f965 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN6;
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <LCD_GPIO_init+0x150>)
 80004fe:	2240      	movs	r2, #64	; 0x40
 8000500:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <LCD_GPIO_init+0x150>)
 8000504:	2204      	movs	r2, #4
 8000506:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <LCD_GPIO_init+0x150>)
 800050a:	2201      	movs	r2, #1
 800050c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 800050e:	4912      	ldr	r1, [pc, #72]	; (8000558 <LCD_GPIO_init+0x150>)
 8000510:	4812      	ldr	r0, [pc, #72]	; (800055c <LCD_GPIO_init+0x154>)
 8000512:	f000 f958 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER  = GPIO_PIN7;
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <LCD_GPIO_init+0x150>)
 8000518:	2280      	movs	r2, #128	; 0x80
 800051a:	801a      	strh	r2, [r3, #0]
	PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <LCD_GPIO_init+0x150>)
 800051e:	2204      	movs	r2, #4
 8000520:	709a      	strb	r2, [r3, #2]
	PINCFG.GPIO_SPEED_OUTPUT= GPIO_SPEED_10M;
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <LCD_GPIO_init+0x150>)
 8000524:	2201      	movs	r2, #1
 8000526:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,  &PINCFG);
 8000528:	490b      	ldr	r1, [pc, #44]	; (8000558 <LCD_GPIO_init+0x150>)
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <LCD_GPIO_init+0x154>)
 800052c:	f000 f94b 	bl	80007c6 <MCAL_GPIO_INIT>

	MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000536:	4809      	ldr	r0, [pc, #36]	; (800055c <LCD_GPIO_init+0x154>)
 8000538:	f000 f9db 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <LCD_GPIO_init+0x154>)
 8000544:	f000 f9d5 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054e:	4803      	ldr	r0, [pc, #12]	; (800055c <LCD_GPIO_init+0x154>)
 8000550:	f000 f9cf 	bl	80008f2 <MCAL_GPIO_WRITEPIN>

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000003c 	.word	0x2000003c
 800055c:	40010800 	.word	0x40010800

08000560 <LCD_CLEAR_SCREEN>:

void LCD_CLEAR_SCREEN() {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_Clear_Display);
 8000564:	2001      	movs	r0, #1
 8000566:	f000 f85b 	bl	8000620 <LCD_WRITE_COMMAND>
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <LCD_KICK>:

void LCD_KICK() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <LCD_KICK+0x28>)
 800057c:	f000 f9b9 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
	delay_ms(50);
 8000580:	2032      	movs	r0, #50	; 0x32
 8000582:	f7ff ff25 	bl	80003d0 <delay_ms>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <LCD_KICK+0x28>)
 800058e:	f000 f9b0 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40010800 	.word	0x40010800

0800059c <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d108      	bne.n	80005c4 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	d805      	bhi.n	80005c4 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_ROW1_COLUMN1+ position);
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	3b80      	subs	r3, #128	; 0x80
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f82e 	bl	8000620 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d108      	bne.n	80005dc <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	2b0f      	cmp	r3, #15
 80005ce:	d805      	bhi.n	80005dc <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_ROW2_COLUMN2 + position);
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	3b40      	subs	r3, #64	; 0x40
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f822 	bl	8000620 <LCD_WRITE_COMMAND>
		}
	}
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <LCD_INIT>:

void LCD_INIT() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

	delay_ms(20);
 80005e8:	2014      	movs	r0, #20
 80005ea:	f7ff fef1 	bl	80003d0 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 80005ee:	f7ff ff0b 	bl	8000408 <LCD_GPIO_init>

	delay_ms(15);
 80005f2:	200f      	movs	r0, #15
 80005f4:	f7ff feec 	bl	80003d0 <delay_ms>
	LCD_WRITE_COMMAND(LCD_Return_Home);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f000 f811 	bl	8000620 <LCD_WRITE_COMMAND>
	LCD_CLEAR_SCREEN();
 80005fe:	f7ff ffaf 	bl	8000560 <LCD_CLEAR_SCREEN>
	LCD_WRITE_COMMAND(LCD_8BITS_2LINES_5X8);
 8000602:	2038      	movs	r0, #56	; 0x38
 8000604:	f000 f80c 	bl	8000620 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_Enty_Mode_Set_Inc);
 8000608:	2006      	movs	r0, #6
 800060a:	f000 f809 	bl	8000620 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ROW1_COLUMN1);
 800060e:	2080      	movs	r0, #128	; 0x80
 8000610:	f000 f806 	bl	8000620 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000614:	200f      	movs	r0, #15
 8000616:	f000 f803 	bl	8000620 <LCD_WRITE_COMMAND>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WRITEPORT(LCD_CTRL, command);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	b29b      	uxth	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <LCD_WRITE_COMMAND+0x40>)
 8000632:	f000 f975 	bl	8000920 <MCAL_GPIO_WRITEPORT>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	4808      	ldr	r0, [pc, #32]	; (8000660 <LCD_WRITE_COMMAND+0x40>)
 800063e:	f000 f958 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <LCD_WRITE_COMMAND+0x40>)
 800064a:	f000 f952 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 800064e:	2001      	movs	r0, #1
 8000650:	f7ff febe 	bl	80003d0 <delay_ms>
	LCD_KICK();
 8000654:	f7ff ff8c 	bl	8000570 <LCD_KICK>

}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40010800 	.word	0x40010800

08000664 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WRITEPORT(LCD_CTRL, character);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	b29b      	uxth	r3, r3
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <LCD_WRITE_CHAR+0x40>)
 8000676:	f000 f953 	bl	8000920 <MCAL_GPIO_WRITEPORT>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000680:	4808      	ldr	r0, [pc, #32]	; (80006a4 <LCD_WRITE_CHAR+0x40>)
 8000682:	f000 f936 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
	MCAL_GPIO_WRITEPIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <LCD_WRITE_CHAR+0x40>)
 800068e:	f000 f930 	bl	80008f2 <MCAL_GPIO_WRITEPIN>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f7ff fe9c 	bl	80003d0 <delay_ms>
	LCD_KICK();
 8000698:	f7ff ff6a 	bl	8000570 <LCD_KICK>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40010800 	.word	0x40010800

080006a8 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	int count = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80006b4:	e01c      	b.n	80006f0 <LCD_WRITE_STRING+0x48>
		count++;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ffcd 	bl	8000664 <LCD_WRITE_CHAR>
		if (count == 16) {
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b10      	cmp	r3, #16
 80006ce:	d104      	bne.n	80006da <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 80006d0:	2100      	movs	r1, #0
 80006d2:	2002      	movs	r0, #2
 80006d4:	f7ff ff62 	bl	800059c <LCD_GOTO_XY>
 80006d8:	e00a      	b.n	80006f0 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d107      	bne.n	80006f0 <LCD_WRITE_STRING+0x48>
			LCD_CLEAR_SCREEN();
 80006e0:	f7ff ff3e 	bl	8000560 <LCD_CLEAR_SCREEN>
			LCD_GOTO_XY(1, 0);
 80006e4:	2100      	movs	r1, #0
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff ff58 	bl	800059c <LCD_GOTO_XY>
			count = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1de      	bne.n	80006b6 <LCD_WRITE_STRING+0xe>
		}
	}
}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <GET_CRLH_POSITION>:
 * PARAM1[IN]----> NUMBER OF PIN
 * RETAVAL	 ----> POSITION IN CR REGISTER
 * NOTE		 ----> EACH PIN HAVE 4 BIT IN CR REGISTER
 *
 */
uint8_t GET_CRLH_POSITION(uint16_t PINNUMBER){
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
	switch(PINNUMBER){
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	2b80      	cmp	r3, #128	; 0x80
 800070e:	d042      	beq.n	8000796 <GET_CRLH_POSITION+0x96>
 8000710:	2b80      	cmp	r3, #128	; 0x80
 8000712:	dc11      	bgt.n	8000738 <GET_CRLH_POSITION+0x38>
 8000714:	2b08      	cmp	r3, #8
 8000716:	d036      	beq.n	8000786 <GET_CRLH_POSITION+0x86>
 8000718:	2b08      	cmp	r3, #8
 800071a:	dc06      	bgt.n	800072a <GET_CRLH_POSITION+0x2a>
 800071c:	2b02      	cmp	r3, #2
 800071e:	d02e      	beq.n	800077e <GET_CRLH_POSITION+0x7e>
 8000720:	2b04      	cmp	r3, #4
 8000722:	d02e      	beq.n	8000782 <GET_CRLH_POSITION+0x82>
 8000724:	2b01      	cmp	r3, #1
 8000726:	d028      	beq.n	800077a <GET_CRLH_POSITION+0x7a>
 8000728:	e047      	b.n	80007ba <GET_CRLH_POSITION+0xba>
 800072a:	2b20      	cmp	r3, #32
 800072c:	d02f      	beq.n	800078e <GET_CRLH_POSITION+0x8e>
 800072e:	2b40      	cmp	r3, #64	; 0x40
 8000730:	d02f      	beq.n	8000792 <GET_CRLH_POSITION+0x92>
 8000732:	2b10      	cmp	r3, #16
 8000734:	d029      	beq.n	800078a <GET_CRLH_POSITION+0x8a>
 8000736:	e040      	b.n	80007ba <GET_CRLH_POSITION+0xba>
 8000738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800073c:	d033      	beq.n	80007a6 <GET_CRLH_POSITION+0xa6>
 800073e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000742:	dc09      	bgt.n	8000758 <GET_CRLH_POSITION+0x58>
 8000744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000748:	d029      	beq.n	800079e <GET_CRLH_POSITION+0x9e>
 800074a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800074e:	d028      	beq.n	80007a2 <GET_CRLH_POSITION+0xa2>
 8000750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000754:	d021      	beq.n	800079a <GET_CRLH_POSITION+0x9a>
 8000756:	e030      	b.n	80007ba <GET_CRLH_POSITION+0xba>
 8000758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800075c:	d027      	beq.n	80007ae <GET_CRLH_POSITION+0xae>
 800075e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000762:	dc03      	bgt.n	800076c <GET_CRLH_POSITION+0x6c>
 8000764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000768:	d01f      	beq.n	80007aa <GET_CRLH_POSITION+0xaa>
 800076a:	e026      	b.n	80007ba <GET_CRLH_POSITION+0xba>
 800076c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000770:	d01f      	beq.n	80007b2 <GET_CRLH_POSITION+0xb2>
 8000772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000776:	d01e      	beq.n	80007b6 <GET_CRLH_POSITION+0xb6>
 8000778:	e01f      	b.n	80007ba <GET_CRLH_POSITION+0xba>

	case GPIO_PIN0:
		return 0;
 800077a:	2300      	movs	r3, #0
 800077c:	e01e      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 800077e:	2304      	movs	r3, #4
 8000780:	e01c      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 8000782:	2308      	movs	r3, #8
 8000784:	e01a      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 8000786:	230c      	movs	r3, #12
 8000788:	e018      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 800078a:	2310      	movs	r3, #16
 800078c:	e016      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 800078e:	2314      	movs	r3, #20
 8000790:	e014      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 8000792:	2318      	movs	r3, #24
 8000794:	e012      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 8000796:	231c      	movs	r3, #28
 8000798:	e010      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 800079a:	2300      	movs	r3, #0
 800079c:	e00e      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 800079e:	2304      	movs	r3, #4
 80007a0:	e00c      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 80007a2:	2308      	movs	r3, #8
 80007a4:	e00a      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 80007a6:	230c      	movs	r3, #12
 80007a8:	e008      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 80007aa:	2310      	movs	r3, #16
 80007ac:	e006      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 80007ae:	2314      	movs	r3, #20
 80007b0:	e004      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 80007b2:	2318      	movs	r3, #24
 80007b4:	e002      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 80007b6:	231c      	movs	r3, #28
 80007b8:	e000      	b.n	80007bc <GET_CRLH_POSITION+0xbc>
		break;


	}
	return 0;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <MCAL_GPIO_INIT>:
 * RETAVAL	 ----> NONE
 * NOTE		 ----> NONE
 *
 */

void MCAL_GPIO_INIT(GPIO_Typedef *GPIOx ,GPIO_PINCONFIG_T *PINCONFIG ){
 80007c6:	b590      	push	{r4, r7, lr}
 80007c8:	b085      	sub	sp, #20
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	6039      	str	r1, [r7, #0]

	uint8_t PIN_CONFIG=0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	73fb      	strb	r3, [r7, #15]


	//PORT CONFIG REGISTER LOW  (GPIOx_CRL) CONFIGURE PINS [0:7]
	//PORT CONFIG REGISTER HIGH (GPIOx_CRH) CONFIGURE PINS [8:15]

	volatile uint32_t *REGISTERCONFIG=NULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]

	REGISTERCONFIG=(PINCONFIG->GPIO_PIN_NUMBER < GPIO_PIN8)? &GPIOx->CRL : &GPIOx->CRH;	//GPIO POINTING TO CR_LOW IF PIN NUMBER < 8 -->[0:7]
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	2bff      	cmp	r3, #255	; 0xff
 80007de:	d801      	bhi.n	80007e4 <MCAL_GPIO_INIT+0x1e>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	e001      	b.n	80007e8 <MCAL_GPIO_INIT+0x22>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3304      	adds	r3, #4
 80007e8:	60bb      	str	r3, [r7, #8]

	//CLEAR CNFy[1:0] & MODEy[1:0]
	(*REGISTERCONFIG) &= ~(0xf << GET_CRLH_POSITION(PINCONFIG->GPIO_PIN_NUMBER));
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff86 	bl	8000700 <GET_CRLH_POSITION>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	230f      	movs	r3, #15
 80007fa:	4093      	lsls	r3, r2
 80007fc:	43da      	mvns	r2, r3
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	401a      	ands	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	601a      	str	r2, [r3, #0]

	//CHECK PIN IS OUTPUT TO USE MODE OF SPEED
	if((PINCONFIG->GPIO_MODE == GPIO_MODE_PUSH_PULL) || (PINCONFIG->GPIO_MODE == GPIO_MODE_OPEN_DRAIN) || (PINCONFIG->GPIO_MODE == GPIO_MODE_AF_PUSH_PULL) || (PINCONFIG->GPIO_MODE == GPIO_MODE_AF_OPEN_DRAIN)){
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	789b      	ldrb	r3, [r3, #2]
 800080c:	2b04      	cmp	r3, #4
 800080e:	d00b      	beq.n	8000828 <MCAL_GPIO_INIT+0x62>
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	789b      	ldrb	r3, [r3, #2]
 8000814:	2b05      	cmp	r3, #5
 8000816:	d007      	beq.n	8000828 <MCAL_GPIO_INIT+0x62>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	2b06      	cmp	r3, #6
 800081e:	d003      	beq.n	8000828 <MCAL_GPIO_INIT+0x62>
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	789b      	ldrb	r3, [r3, #2]
 8000824:	2b07      	cmp	r3, #7
 8000826:	d10e      	bne.n	8000846 <MCAL_GPIO_INIT+0x80>

		/*USED -4 BECAUSE THE MODES DEFINED WHEN WE ABSTRACT 4 WE GET THE VALUE SHOULD BE AT REGISTER
		 EXAMBLE USING PUSH PULL MODE FROM MACROS 0x00000004 - 4 = 0x00000000 RHAT WHAT WE WANT ACCORDING SPICS*/

		PIN_CONFIG=((((PINCONFIG->GPIO_MODE - 4) <<2 )|(PINCONFIG->GPIO_SPEED_OUTPUT)) &0x0f);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	3b04      	subs	r3, #4
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	b25a      	sxtb	r2, r3
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	78db      	ldrb	r3, [r3, #3]
 8000836:	b25b      	sxtb	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b25b      	sxtb	r3, r3
 800083c:	b2db      	uxtb	r3, r3
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e02c      	b.n	80008a0 <MCAL_GPIO_INIT+0xda>
	}
	//THAT THE PIN IS INPUT & MODE OF SPEED AT RESET STATE
	else{
		if((PINCONFIG->GPIO_MODE==GPIO_MODE_ANALOG) || (PINCONFIG->GPIO_MODE==GPIO_MODE_FLOATING) ){
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d003      	beq.n	8000856 <MCAL_GPIO_INIT+0x90>
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	789b      	ldrb	r3, [r3, #2]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d107      	bne.n	8000866 <MCAL_GPIO_INIT+0xa0>
			PIN_CONFIG=((((PINCONFIG->GPIO_MODE) <<2 )| 0x0) & 0x0f);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	789b      	ldrb	r3, [r3, #2]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e01c      	b.n	80008a0 <MCAL_GPIO_INIT+0xda>
		}else if (PINCONFIG->GPIO_MODE == GPIO_MODE_AF_INPUT )		//CONSIDER ALTERNATIVE FUNCTIO AS INPUT FLOATING
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	2b08      	cmp	r3, #8
 800086c:	d102      	bne.n	8000874 <MCAL_GPIO_INIT+0xae>
		{
			PIN_CONFIG=(((GPIO_MODE_AF_INPUT )| 0x0) & 0x0f);
 800086e:	2308      	movs	r3, #8
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e015      	b.n	80008a0 <MCAL_GPIO_INIT+0xda>

		}
		else  //PULL UP PELL DOWN INPUT MODE
		{
			PIN_CONFIG=(((GPIO_MODE_PULLUP)| 0x0) & 0x0f);
 8000874:	2302      	movs	r3, #2
 8000876:	73fb      	strb	r3, [r7, #15]
			//FROM TABLE 20 REFERED TO ODR REGISTER IS( 0 @ PULL UP) & (1 @ PULL DOWN)
			if(PINCONFIG->GPIO_MODE == GPIO_MODE_PULLUP)
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	789b      	ldrb	r3, [r3, #2]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d107      	bne.n	8000890 <MCAL_GPIO_INIT+0xca>
			{
				GPIOx->ODR |= PINCONFIG->GPIO_PIN_NUMBER;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	8812      	ldrh	r2, [r2, #0]
 8000888:	431a      	orrs	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	e007      	b.n	80008a0 <MCAL_GPIO_INIT+0xda>

			}else {
				GPIOx->ODR &= ~(PINCONFIG->GPIO_PIN_NUMBER);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	8812      	ldrh	r2, [r2, #0]
 8000898:	43d2      	mvns	r2, r2
 800089a:	401a      	ands	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	60da      	str	r2, [r3, #12]
			}

		}

	}
	(*REGISTERCONFIG) |= ((PIN_CONFIG) << GET_CRLH_POSITION(PINCONFIG->GPIO_PIN_NUMBER));
 80008a0:	7bfc      	ldrb	r4, [r7, #15]
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff2a 	bl	8000700 <GET_CRLH_POSITION>
 80008ac:	4603      	mov	r3, r0
 80008ae:	fa04 f203 	lsl.w	r2, r4, r3
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	431a      	orrs	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	601a      	str	r2, [r3, #0]

}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd90      	pop	{r4, r7, pc}

080008c4 <MCAL_GPIO_READPIN>:
 * PARAM2[IN]----> PIN_NUMBER WHICH SELECTED 0: 15 ACCORDING GPIO PINS DEFINED
 * RETAVAL	 ----> THE INPUT PIN VALUE (TWO VALUES BASED ON GPIO INPUT PIN STATE)
 * NOTE		 ----> NONE
 *
 */
uint8_t MCAL_GPIO_READPIN(GPIO_Typedef *GPIOx ,uint16_t PIN_NUMBER ){
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
	uint8_t BIT_STATUS;
	if(((GPIOx->IDR)& PIN_NUMBER) !=(uint16_t)GPIO_PIN_RESET) 	//MASKED WHICH NOT READ ZERO THAT MEAN IT READ ONE
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	887b      	ldrh	r3, [r7, #2]
 80008d6:	4013      	ands	r3, r2
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <MCAL_GPIO_READPIN+0x1e>
	{
		BIT_STATUS=GPIO_PIN_SET;
 80008dc:	2301      	movs	r3, #1
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e001      	b.n	80008e6 <MCAL_GPIO_READPIN+0x22>

	}else{
		BIT_STATUS=GPIO_PIN_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]
	}
	return BIT_STATUS;
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <MCAL_GPIO_WRITEPIN>:
 * RETAVAL	 ----> NONE
 * NOTE		 ----> NONE
 *
 */

void MCAL_GPIO_WRITEPIN(GPIO_Typedef *GPIOx ,uint16_t PIN_NUMBER , uint8_t VAL ){
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	460b      	mov	r3, r1
 80008fc:	807b      	strh	r3, [r7, #2]
 80008fe:	4613      	mov	r3, r2
 8000900:	707b      	strb	r3, [r7, #1]
	if(VAL != GPIO_PIN_RESET){
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <MCAL_GPIO_WRITEPIN+0x1e>
		//GPIOx->ODR |= PIN_NUMBER;
		GPIOx->BSSR = PIN_NUMBER;     	  //0: No action on the corresponding ODRx bit  1: Reset the corresponding ODRx bi
 8000908:	887a      	ldrh	r2, [r7, #2]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	611a      	str	r2, [r3, #16]

	}else{
		GPIOx->BRR = PIN_NUMBER;		 //0: No action on the corresponding ODRx bit  1: Reset the corresponding ODRx bi
	}
}
 800090e:	e002      	b.n	8000916 <MCAL_GPIO_WRITEPIN+0x24>
		GPIOx->BRR = PIN_NUMBER;		 //0: No action on the corresponding ODRx bit  1: Reset the corresponding ODRx bi
 8000910:	887a      	ldrh	r2, [r7, #2]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	615a      	str	r2, [r3, #20]
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <MCAL_GPIO_WRITEPORT>:
 * RETAVAL	 ----> NONE
 * NOTE		 ----> NONE
 *
 */

void MCAL_GPIO_WRITEPORT(GPIO_Typedef *GPIOx, uint16_t VAL ){
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	807b      	strh	r3, [r7, #2]
		GPIOx->ODR = (uint16_t)VAL;
 800092c:	887a      	ldrh	r2, [r7, #2]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	60da      	str	r2, [r3, #12]

}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <Clock_init>:
#define EIGHT 	0x00
#define NINE 	0x10



void Clock_init(){
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	//ENABLE CLOCK GPIOA
	RCC_GPIOA_CLK_EN();
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <Clock_init+0x24>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <Clock_init+0x24>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	6193      	str	r3, [r2, #24]
	//ENABLE CLOCK GPIOB
	RCC_GPIOB_CLK_EN();
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <Clock_init+0x24>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a03      	ldr	r2, [pc, #12]	; (8000960 <Clock_init+0x24>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6193      	str	r3, [r2, #24]


}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000

08000964 <GPIO_init>:

void GPIO_init(){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
	GPIO_PINCONFIG_T PINCFG;


	//PA1 AS INPUT HIGH IMPEDANCE(FLOATING)
	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN9;
 800096a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800096e:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE=GPIO_MODE_PUSH_PULL;
 8000970:	2304      	movs	r3, #4
 8000972:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOB, &PINCFG);
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	4826      	ldr	r0, [pc, #152]	; (8000a14 <GPIO_init+0xb0>)
 800097a:	f7ff ff24 	bl	80007c6 <MCAL_GPIO_INIT>


	//PB1 AS OUTPUT PUSH-PULL MODE
	//CNF PISH PULL OUTPUT GENERAL REGISTER
	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN10;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE=GPIO_MODE_PUSH_PULL;
 8000984:	2304      	movs	r3, #4
 8000986:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 8000988:	2301      	movs	r3, #1
 800098a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &PINCFG);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4820      	ldr	r0, [pc, #128]	; (8000a14 <GPIO_init+0xb0>)
 8000992:	f7ff ff18 	bl	80007c6 <MCAL_GPIO_INIT>




	//PA13 AS INPUT HIGH IMPEDANCE(FLOATING)
	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN11;
 8000996:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800099a:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE=GPIO_MODE_PUSH_PULL;
 800099c:	2304      	movs	r3, #4
 800099e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOB, &PINCFG);
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	481b      	ldr	r0, [pc, #108]	; (8000a14 <GPIO_init+0xb0>)
 80009a6:	f7ff ff0e 	bl	80007c6 <MCAL_GPIO_INIT>

	//PB13 AS OUTPUT PUSH-PULL MODE
	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN12;
 80009aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ae:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE=GPIO_MODE_PUSH_PULL;
 80009b0:	2304      	movs	r3, #4
 80009b2:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 80009b4:	2301      	movs	r3, #1
 80009b6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &PINCFG);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4815      	ldr	r0, [pc, #84]	; (8000a14 <GPIO_init+0xb0>)
 80009be:	f7ff ff02 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN13;
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE=GPIO_MODE_PUSH_PULL;
 80009c8:	2304      	movs	r3, #4
 80009ca:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 80009cc:	2301      	movs	r3, #1
 80009ce:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &PINCFG);
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	480f      	ldr	r0, [pc, #60]	; (8000a14 <GPIO_init+0xb0>)
 80009d6:	f7ff fef6 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN14;
 80009da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009de:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE=GPIO_MODE_PUSH_PULL;
 80009e0:	2304      	movs	r3, #4
 80009e2:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 80009e4:	2301      	movs	r3, #1
 80009e6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &PINCFG);
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <GPIO_init+0xb0>)
 80009ee:	f7ff feea 	bl	80007c6 <MCAL_GPIO_INIT>

	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN15;
 80009f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f6:	80bb      	strh	r3, [r7, #4]
	PINCFG.GPIO_MODE=GPIO_MODE_PUSH_PULL;
 80009f8:	2304      	movs	r3, #4
 80009fa:	71bb      	strb	r3, [r7, #6]
	PINCFG.GPIO_SPEED_OUTPUT=GPIO_SPEED_10M;
 80009fc:	2301      	movs	r3, #1
 80009fe:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB, &PINCFG);
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <GPIO_init+0xb0>)
 8000a06:	f7ff fede 	bl	80007c6 <MCAL_GPIO_INIT>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <wait_ms>:
void wait_ms(uint32_t time) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	e00b      	b.n	8000a3e <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	e002      	b.n	8000a32 <wait_ms+0x1a>
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	2bfe      	cmp	r3, #254	; 0xfe
 8000a36:	d9f9      	bls.n	8000a2c <wait_ms+0x14>
	for (i = 0; i < time; i++)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d3ef      	bcc.n	8000a26 <wait_ms+0xe>
			;
}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <main>:
int main(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0

	Clock_init();
 8000a56:	f7ff ff71 	bl	800093c <Clock_init>
	LCD_INIT();
 8000a5a:	f7ff fdc3 	bl	80005e4 <LCD_INIT>
	unsigned char key_pressed;
	LCD_WRITE_STRING("HEY");
 8000a5e:	482e      	ldr	r0, [pc, #184]	; (8000b18 <main+0xc8>)
 8000a60:	f7ff fe22 	bl	80006a8 <LCD_WRITE_STRING>
	wait_ms(30);
 8000a64:	201e      	movs	r0, #30
 8000a66:	f7ff ffd7 	bl	8000a18 <wait_ms>
	LCD_CLEAR_SCREEN();
 8000a6a:	f7ff fd79 	bl	8000560 <LCD_CLEAR_SCREEN>
	GPIO_init();
 8000a6e:	f7ff ff79 	bl	8000964 <GPIO_init>
	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000a72:	4a2a      	ldr	r2, [pc, #168]	; (8000b1c <main+0xcc>)
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a7a:	c303      	stmia	r3!, {r0, r1}
 8000a7c:	801a      	strh	r2, [r3, #0]
 8000a7e:	3302      	adds	r3, #2
 8000a80:	0c12      	lsrs	r2, r2, #16
 8000a82:	701a      	strb	r2, [r3, #0]
	unsigned char DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 8000a84:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <main+0xd0>)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a8a:	c303      	stmia	r3!, {r0, r1}
 8000a8c:	801a      	strh	r2, [r3, #0]
 8000a8e:	3302      	adds	r3, #2
 8000a90:	0c12      	lsrs	r2, r2, #16
 8000a92:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 8000a94:	2300      	movs	r3, #0
 8000a96:	77fb      	strb	r3, [r7, #31]
 8000a98:	e01b      	b.n	8000ad2 <main+0x82>
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 8000a9a:	7ffb      	ldrb	r3, [r7, #31]
 8000a9c:	f107 0220 	add.w	r2, r7, #32
 8000aa0:	4413      	add	r3, r2
 8000aa2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fddc 	bl	8000664 <LCD_WRITE_CHAR>
		MCAL_GPIO_WRITEPORT(GPIOB, DISPLAY[i] << 9); /* write data on to the LED port */
 8000aac:	7ffb      	ldrb	r3, [r7, #31]
 8000aae:	f107 0220 	add.w	r2, r7, #32
 8000ab2:	4413      	add	r3, r2
 8000ab4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	025b      	lsls	r3, r3, #9
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4818      	ldr	r0, [pc, #96]	; (8000b24 <main+0xd4>)
 8000ac2:	f7ff ff2d 	bl	8000920 <MCAL_GPIO_WRITEPORT>
		wait_ms(100);
 8000ac6:	2064      	movs	r0, #100	; 0x64
 8000ac8:	f7ff ffa6 	bl	8000a18 <wait_ms>
	for (unsigned char i = 0; i < 11; i++) {
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	77fb      	strb	r3, [r7, #31]
 8000ad2:	7ffb      	ldrb	r3, [r7, #31]
 8000ad4:	2b0a      	cmp	r3, #10
 8000ad6:	d9e0      	bls.n	8000a9a <main+0x4a>
		/* wait for 1 second */
	}
//	MCAL_GPIO_WritePort(GPIOB, 0xDE);
//	wait_ms(100);
	LCD_CLEAR_SCREEN();
 8000ad8:	f7ff fd42 	bl	8000560 <LCD_CLEAR_SCREEN>
	Keypad_init();
 8000adc:	f7ff fb48 	bl	8000170 <Keypad_init>
	LCD_WRITE_STRING("Keypad is ready");
 8000ae0:	4811      	ldr	r0, [pc, #68]	; (8000b28 <main+0xd8>)
 8000ae2:	f7ff fde1 	bl	80006a8 <LCD_WRITE_STRING>
	wait_ms(30);
 8000ae6:	201e      	movs	r0, #30
 8000ae8:	f7ff ff96 	bl	8000a18 <wait_ms>
	LCD_CLEAR_SCREEN();
 8000aec:	f7ff fd38 	bl	8000560 <LCD_CLEAR_SCREEN>

	while (1) {

		key_pressed = Keypad_getkey();
 8000af0:	f7ff fba4 	bl	800023c <Keypad_getkey>
 8000af4:	4603      	mov	r3, r0
 8000af6:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed) {
 8000af8:	7fbb      	ldrb	r3, [r7, #30]
 8000afa:	2b3f      	cmp	r3, #63	; 0x3f
 8000afc:	d002      	beq.n	8000b04 <main+0xb4>
 8000afe:	2b41      	cmp	r3, #65	; 0x41
 8000b00:	d008      	beq.n	8000b14 <main+0xc4>
 8000b02:	e002      	b.n	8000b0a <main+0xba>
		case 'A':
			break;
		case '?':
			LCD_CLEAR_SCREEN();
 8000b04:	f7ff fd2c 	bl	8000560 <LCD_CLEAR_SCREEN>
			break;
 8000b08:	e005      	b.n	8000b16 <main+0xc6>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000b0a:	7fbb      	ldrb	r3, [r7, #30]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fda9 	bl	8000664 <LCD_WRITE_CHAR>
			break;
 8000b12:	e000      	b.n	8000b16 <main+0xc6>
			break;
 8000b14:	bf00      	nop
		key_pressed = Keypad_getkey();
 8000b16:	e7eb      	b.n	8000af0 <main+0xa0>
 8000b18:	08000be0 	.word	0x08000be0
 8000b1c:	08000bf4 	.word	0x08000bf4
 8000b20:	08000c00 	.word	0x08000c00
 8000b24:	40010c00 	.word	0x40010c00
 8000b28:	08000be4 	.word	0x08000be4

08000b2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b30:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b5a:	f000 f811 	bl	8000b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5e:	f7ff ff77 	bl	8000a50 <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   r0, =_estack
 8000b64:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b70:	08000c14 	.word	0x08000c14
  ldr r2, =_sbss
 8000b74:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000b78:	20000040 	.word	0x20000040

08000b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>
	...

08000b80 <__libc_init_array>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	2500      	movs	r5, #0
 8000b84:	4e0c      	ldr	r6, [pc, #48]	; (8000bb8 <__libc_init_array+0x38>)
 8000b86:	4c0d      	ldr	r4, [pc, #52]	; (8000bbc <__libc_init_array+0x3c>)
 8000b88:	1ba4      	subs	r4, r4, r6
 8000b8a:	10a4      	asrs	r4, r4, #2
 8000b8c:	42a5      	cmp	r5, r4
 8000b8e:	d109      	bne.n	8000ba4 <__libc_init_array+0x24>
 8000b90:	f000 f81a 	bl	8000bc8 <_init>
 8000b94:	2500      	movs	r5, #0
 8000b96:	4e0a      	ldr	r6, [pc, #40]	; (8000bc0 <__libc_init_array+0x40>)
 8000b98:	4c0a      	ldr	r4, [pc, #40]	; (8000bc4 <__libc_init_array+0x44>)
 8000b9a:	1ba4      	subs	r4, r4, r6
 8000b9c:	10a4      	asrs	r4, r4, #2
 8000b9e:	42a5      	cmp	r5, r4
 8000ba0:	d105      	bne.n	8000bae <__libc_init_array+0x2e>
 8000ba2:	bd70      	pop	{r4, r5, r6, pc}
 8000ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ba8:	4798      	blx	r3
 8000baa:	3501      	adds	r5, #1
 8000bac:	e7ee      	b.n	8000b8c <__libc_init_array+0xc>
 8000bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bb2:	4798      	blx	r3
 8000bb4:	3501      	adds	r5, #1
 8000bb6:	e7f2      	b.n	8000b9e <__libc_init_array+0x1e>
 8000bb8:	08000c0c 	.word	0x08000c0c
 8000bbc:	08000c0c 	.word	0x08000c0c
 8000bc0:	08000c0c 	.word	0x08000c0c
 8000bc4:	08000c10 	.word	0x08000c10

08000bc8 <_init>:
 8000bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bca:	bf00      	nop
 8000bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bce:	bc08      	pop	{r3}
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	4770      	bx	lr

08000bd4 <_fini>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	bf00      	nop
 8000bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bda:	bc08      	pop	{r3}
 8000bdc:	469e      	mov	lr, r3
 8000bde:	4770      	bx	lr
