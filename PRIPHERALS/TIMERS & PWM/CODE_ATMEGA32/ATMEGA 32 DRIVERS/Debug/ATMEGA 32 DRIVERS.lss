
ATMEGA 32 DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000002c4  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800066  00800066  0000035e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe5  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089d  00000000  00000000  000014c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b3  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e8  00000000  00000000  00002864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006aa  00000000  00000000  00002f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000035f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_10>
  2c:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  8a:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SERVO_INIT>:
 */ 
#include <HEADERS.h>


void SERVO_INIT(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <SERVO_INIT+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <SERVO_INIT+0x8>
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	PWM_CONFIG_T CONFIG={FAST_PWM,PWM_OCIE_DISABLE,PWM_TOIE_DISABLE,PWM_PRESC_CLCK8,PWM_INVERTING};
  a0:	85 e0       	ldi	r24, 0x05	; 5
  a2:	e0 e6       	ldi	r30, 0x60	; 96
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	de 01       	movw	r26, r28
  a8:	11 96       	adiw	r26, 0x01	; 1
  aa:	01 90       	ld	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	8a 95       	dec	r24
  b0:	e1 f7       	brne	.-8      	; 0xaa <SERVO_INIT+0x18>
		PWM_INIT(&CONFIG);
  b2:	ce 01       	movw	r24, r28
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	0e 94 a8 00 	call	0x150	; 0x150 <PWM_INIT>
}
  ba:	0f 90       	pop	r0
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <SERVO_ANGLE>:
void SERVO_ANGLE(uint8_t angle)
{
	
	PWM_GET_CMP_VALUE(angle);
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 03 01 	call	0x206	; 0x206 <PWM_GET_CMP_VALUE>
  d0:	08 95       	ret

000000d2 <main>:
	
*/

int main()
{
	MCAL_PORT_DIR(DIO_PORTB, DIO_PORT_OUT);
  d2:	6f ef       	ldi	r22, 0xFF	; 255
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 98 00 	call	0x130	; 0x130 <MCAL_PORT_DIR>
	sei();
  da:	78 94       	sei
	

SERVO_INIT();	
  dc:	0e 94 49 00 	call	0x92	; 0x92 <SERVO_INIT>
	
	while (1)
	{
		SERVO_ANGLE(0);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 65 00 	call	0xca	; 0xca <SERVO_ANGLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ed       	ldi	r18, 0xDF	; 223
  ea:	83 e9       	ldi	r24, 0x93	; 147
  ec:	94 e0       	ldi	r25, 0x04	; 4
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x1c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x26>
  f8:	00 00       	nop
		_delay_ms(1500);
		SERVO_ANGLE(90);
  fa:	8a e5       	ldi	r24, 0x5A	; 90
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 65 00 	call	0xca	; 0xca <SERVO_ANGLE>
 102:	2f ed       	ldi	r18, 0xDF	; 223
 104:	83 e9       	ldi	r24, 0x93	; 147
 106:	94 e0       	ldi	r25, 0x04	; 4
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x36>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x40>
 112:	00 00       	nop
		_delay_ms(1500);
		SERVO_ANGLE(180);
 114:	84 eb       	ldi	r24, 0xB4	; 180
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 65 00 	call	0xca	; 0xca <SERVO_ANGLE>
 11c:	2f ed       	ldi	r18, 0xDF	; 223
 11e:	83 e9       	ldi	r24, 0x93	; 147
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x50>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x5a>
 12c:	00 00       	nop
 12e:	d8 cf       	rjmp	.-80     	; 0xe0 <main+0xe>

00000130 <MCAL_PORT_DIR>:
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	41 f0       	breq	.+16     	; 0x144 <MCAL_PORT_DIR+0x14>
 134:	28 f0       	brcs	.+10     	; 0x140 <MCAL_PORT_DIR+0x10>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	39 f0       	breq	.+14     	; 0x148 <MCAL_PORT_DIR+0x18>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	39 f0       	breq	.+14     	; 0x14c <MCAL_PORT_DIR+0x1c>
 13e:	08 95       	ret
 140:	6a bb       	out	0x1a, r22	; 26
 142:	08 95       	ret
 144:	67 bb       	out	0x17, r22	; 23
 146:	08 95       	ret
 148:	64 bb       	out	0x14, r22	; 20
 14a:	08 95       	ret
 14c:	61 bb       	out	0x11, r22	; 17
 14e:	08 95       	ret

00000150 <PWM_INIT>:

	
}
void PWM_SETCALLBACK_CMP_INTERRUPT(PTR_VoidFunVoid_t CALLBACK){
	
			CALLBACK_CMP=CALLBACK;
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	09 f4       	brne	.+2      	; 0x156 <PWM_INIT+0x6>
 154:	54 c0       	rjmp	.+168    	; 0x1fe <PWM_INIT+0xae>
 156:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <PWM_CONFIG+0x1>
 15a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <PWM_CONFIG>
 15e:	fc 01       	movw	r30, r24
 160:	80 81       	ld	r24, Z
 162:	80 34       	cpi	r24, 0x40	; 64
 164:	11 f0       	breq	.+4      	; 0x16a <PWM_INIT+0x1a>
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	79 f4       	brne	.+30     	; 0x188 <PWM_INIT+0x38>
 16a:	80 34       	cpi	r24, 0x40	; 64
 16c:	39 f4       	brne	.+14     	; 0x17c <PWM_INIT+0x2c>
 16e:	83 b7       	in	r24, 0x33	; 51
 170:	80 64       	ori	r24, 0x40	; 64
 172:	83 bf       	out	0x33, r24	; 51
 174:	83 b7       	in	r24, 0x33	; 51
 176:	88 60       	ori	r24, 0x08	; 8
 178:	83 bf       	out	0x33, r24	; 51
 17a:	06 c0       	rjmp	.+12     	; 0x188 <PWM_INIT+0x38>
 17c:	83 b7       	in	r24, 0x33	; 51
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	83 bf       	out	0x33, r24	; 51
 182:	83 b7       	in	r24, 0x33	; 51
 184:	87 7f       	andi	r24, 0xF7	; 247
 186:	83 bf       	out	0x33, r24	; 51
 188:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <PWM_CONFIG>
 18c:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <PWM_CONFIG+0x1>
 190:	83 81       	ldd	r24, Z+3	; 0x03
 192:	88 30       	cpi	r24, 0x08	; 8
 194:	18 f4       	brcc	.+6      	; 0x19c <PWM_INIT+0x4c>
 196:	93 b7       	in	r25, 0x33	; 51
 198:	89 2b       	or	r24, r25
 19a:	83 bf       	out	0x33, r24	; 51
 19c:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <PWM_CONFIG>
 1a0:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <PWM_CONFIG+0x1>
 1a4:	81 81       	ldd	r24, Z+1	; 0x01
 1a6:	88 23       	and	r24, r24
 1a8:	11 f0       	breq	.+4      	; 0x1ae <PWM_INIT+0x5e>
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	19 f4       	brne	.+6      	; 0x1b4 <PWM_INIT+0x64>
 1ae:	99 b7       	in	r25, 0x39	; 57
 1b0:	89 2b       	or	r24, r25
 1b2:	89 bf       	out	0x39, r24	; 57
 1b4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <PWM_CONFIG>
 1b8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <PWM_CONFIG+0x1>
 1bc:	82 81       	ldd	r24, Z+2	; 0x02
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	18 f4       	brcc	.+6      	; 0x1c8 <PWM_INIT+0x78>
 1c2:	99 b7       	in	r25, 0x39	; 57
 1c4:	89 2b       	or	r24, r25
 1c6:	89 bf       	out	0x39, r24	; 57
 1c8:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <PWM_CONFIG>
 1cc:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <PWM_CONFIG+0x1>
 1d0:	84 81       	ldd	r24, Z+4	; 0x04
 1d2:	80 33       	cpi	r24, 0x30	; 48
 1d4:	11 f0       	breq	.+4      	; 0x1da <PWM_INIT+0x8a>
 1d6:	80 32       	cpi	r24, 0x20	; 32
 1d8:	a1 f4       	brne	.+40     	; 0x202 <PWM_INIT+0xb2>
 1da:	80 33       	cpi	r24, 0x30	; 48
 1dc:	41 f4       	brne	.+16     	; 0x1ee <PWM_INIT+0x9e>
 1de:	83 b7       	in	r24, 0x33	; 51
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	83 bf       	out	0x33, r24	; 51
 1e4:	83 b7       	in	r24, 0x33	; 51
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	83 bf       	out	0x33, r24	; 51
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
 1ee:	83 b7       	in	r24, 0x33	; 51
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	83 bf       	out	0x33, r24	; 51
 1f4:	83 b7       	in	r24, 0x33	; 51
 1f6:	8f 7e       	andi	r24, 0xEF	; 239
 1f8:	83 bf       	out	0x33, r24	; 51
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	08 95       	ret
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret

00000206 <PWM_GET_CMP_VALUE>:
 206:	2c b7       	in	r18, 0x3c	; 60
 208:	fc 01       	movw	r30, r24
 20a:	20 83       	st	Z, r18
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	08 95       	ret

00000210 <__vector_10>:
}


ISR(TIMER0_COMP_vect){
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	NUM_COM++;
 232:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <NUM_COM>
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <NUM_COM>
	CALLBACK_CMP();
 23c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <__data_end>
 240:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <__data_end+0x1>
 244:	09 95       	icall
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	7f 91       	pop	r23
 254:	6f 91       	pop	r22
 256:	5f 91       	pop	r21
 258:	4f 91       	pop	r20
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <__vector_11>:
ISR(TIMER0_OVF_vect){
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31
	NUM_OVF++;
 28a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <NUM_OVF>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <NUM_OVF>
	CALLBACK_OVF();
 294:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <CALLBACK_OVF>
 298:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <CALLBACK_OVF+0x1>
 29c:	09 95       	icall
}
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	7f 91       	pop	r23
 2ac:	6f 91       	pop	r22
 2ae:	5f 91       	pop	r21
 2b0:	4f 91       	pop	r20
 2b2:	3f 91       	pop	r19
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
