/*
 * STM32F103C6_SPI_DRIVER.h
 *
 *  Created on: Jul 22, 2023
 *      Author: King 45M
 */

#ifndef INC_STM32F103C6_SPI_DRIVER_H_
#define INC_STM32F103C6_SPI_DRIVER_H_

struct S_IRQ_SRC{
	//USED TO KNOW THE ERROR SRC FOR APPLICATION

	uint8_t TXE:1;			//TRANSMITTER IS EMPTY
	uint8_t RXNE:1;			//RX BUFFER IS NOT EMPTY
	uint8_t ERRI:1;			//ERROR INTERRUPT
	uint8_t RESERVED:5;

};
typedef struct{
	uint16_t	SPI_DEVICE_MODE; 					//SPECIFIC OPERATING MODE [MASTER OR SLAVE] FROM SPI DEVICE MODE
	uint16_t	SPI_COMMUNICATION_MODE; 			//SPECIFIC BIDERCTIONAL MODE [ONE OR TWO DIRECTIONAL] FROM SPI DIRECTION MODE MACROS
	uint16_t  	SPI_FRAME_FORMAT; 					//SPECIFIC LSB OR MSB   FROM FRAME FORMAT MACROS
	uint16_t	SPI_DATA_SIZE; 						//SPECIFIC AS SIZE [SIZE 8 BIT OR 16] ACCORDING FROM DATA SIZE REFERNCE MACROS
	uint16_t	SPI_CLCK_POLARITY; 					// ACCORDING FROM POLARITY MACROS
	uint16_t	SPI__CLCK_PHASE; 					//SPECIFIC AS STOP BIT FOR FRAME  ACCORDING FROM CLCK PHASE REFERNCE MACROS(.5 , 1 , 1.5 , 2)
	uint16_t	SPI_NSS; 							//SPECIFIC AS MANAGED BY (HW OR SW) ACCORDING FROM MACROS MANAGED NSS
	uint16_t	SPI_BAUDRATE; 						//BAUDRATE OF SPI DRIVED FROM MASTER CLCK, SLAVE CLCK NOT NEED TO SET
	uint16_t	SPI_IRQ_ENABLE; 					//ENABLE OR DISABLE SPI IRQ TX/RX ACCORDING FROM IRQ EMABLE MACROS

	void(* P_IRQ_CALLBACK)(struct S_IRQ_SRC IRQ_SRC);			//FOR ISR CANNOT BE IN APPLICATION BUT IN MCAL (CALL ONCE IRQ HAPPEN)
}SPI_CONFIG;

//==******************************REFERENCE MACROS******************************==//



//SPI SPECIFIC MODE

#define	SPI_MASTER_MODE		(uint16_t)(1<<2)				//FROM SPI CR1 REGISTER FOR MASTER MODE
#define	SPI_SLAVE_MODE		(uint16_t)(0)					//FROM SPI CR1 REGISTER FOR SLAVE MODE

//SPI DIRECTION MODE MACROS

#define	SPI_2LINE			(uint16_t)(0)							//FOR TWO LINE TX , RX
#define	SPI_2LINE_RX		(uint16_t)(1<<10)						//FOR TWO LINE BUT RECIEVED ONLY
#define	SPI_1LINE_RX		(uint16_t)(1<<15)						//FOR ONE LINE BUT RECIEVED ONLY
#define	SPI_1LINE_TX		(uint16_t)(1<<15 | 1<<14) 				//FOR ONE LINE BUT TRANSMITT ONLY


// SPI FRAME FORMAT MACROS

#define	SPI_MSB		(uint16_t)(0)							//FOR MOST BIT TRANSMITT FIRST
#define	SPI_LSB		(uint16_t)(1<<7)						//FOR LEAST BIT TRANSMITT FIRST


//DATA SIZE REFERNCE MACROS

#define	SPI_8BIT_DATA		(uint16_t)(0)					//FOR 8 BIT DATA FRAME FORMAT IS SELECTED
#define	SPI_16BIT_DATA		(uint16_t)(1<<11)				//FOR 16 BIT DATA FRAME FORMAT IS SELECTED

//FROM POLARITY MACROS

#define	SPI_POLARITY_HIGH		(uint16_t)(1<<1)			//FOR HIGH (1) CLCK POLARITY IDLE
#define	SPI_POLARITY_LOW		(uint16_t)(0)				//FOR LOW  (0) CLCK POLARITY IDLE

//CLCK PHASE REFERNCE MACROS

#define	SPI_PHASE_1ST		(uint16_t)(0)					//FOR THE FIRST CLCK TRANSTION IS THE FIRST DATA CAPTURE EDGE
#define	SPI_PHASE_2ST		(uint16_t)(1<<0)				//FOR THE SECOND CLCK TRANSTION IS THE FIRST DATA CAPTURE EDGE



//MANAGED NSS MACROS

#define	SPI_NSS_HW_SLAVE					(uint16_t)(0)						//FOR HARDWARE , AS A SLAVE [SPI CR1]
#define	SPI_NSS_HW_MASTER_OUTPUT_EN			(uint16_t)(1<<2)					//FOR HARDWARE , AS A MASTER , SLAVE SELECT OUTPUT IS ENABLE[SPI_CR2 REGISTER]
#define	SPI_NSS_HW_MASTER_OUTPUT_DISEN		~(uint16_t)(1<<2)					//FOR HARDWARE , AS A MASTER , SLAVE SELECT OUTPUT IS DISABLE[SPI_CR2 REGISTER]

#define	SPI_NSS_SW_SET			(uint16_t)(1<<9 | 1<<8)			//FOR SOFTWARE , AS A MASTER , SLAVE [SET HIGH]
#define	SPI_NSS_SW_RESET		(uint16_t)(1<<9)				//FOR SOFTWARE , AS A MASTER , SLAVE [RESET 0]


//BAUDRATE PRESCALER MACROS

#define	SPI_BAUDRATE_PRESC2			(uint16_t)(0)					//FOR FPCLCK/2
#define	SPI_BAUDRATE_PRESC4			(uint16_t)(0b001 << 3)			//FOR FPCLCK/4
#define	SPI_BAUDRATE_PRESC8			(uint16_t)(0b010 << 3)			//FOR FPCLCK/8
#define	SPI_BAUDRATE_PRESC16		(uint16_t)(0b011 << 3)			//FOR FPCLCK/16
#define	SPI_BAUDRATE_PRESC32		(uint16_t)(0b100 << 3)			//FOR FPCLCK/32
#define	SPI_BAUDRATE_PRESC64		(uint16_t)(0b101 << 3)			//FOR FPCLCK/64
#define	SPI_BAUDRATE_PRESC128		(uint16_t)(0b110 << 3)			//FOR FPCLCK/128
#define	SPI_BAUDRATE_PRESC256		(uint16_t)(0b111 << 3)			//FOR FPCLCK/256


//IRQ EMABLE MACROS


#define	SPI_IRQ_EN_NONE		(uint16_t)(0)				//FOR MONE INTERRUPT IN [SPI_CR2 REGISTER]
#define	SPI_IRQ_EN_TXEIE	(uint16_t)(1<<7)			//FOR TX BUFFER EMPTY INTERRUPT ,FLAG IS SET IN [SPI_CR2 REGISTER]
#define	SPI_IRQ_EN_RXNEIE	(uint16_t)(1<<6)			//FOR RX BUFFER NOT EMPTY INTERRUPT ,FLAG IS SET IN [SPI_CR2 REGISTER]
#define	SPI_IRQ_EN_ERRIE	(uint16_t)(1<<5)			//FOR ERROR INTERRUPED IS ENABLED IN [SPI_CR2 REGISTER]





enum POLLING_MECHASIM{
	POLLING_ENABLE,
	POLLING_DISABLE
};

void MCAL_SPI_INIT(SPI_Typedef *SPIx ,SPI_CONFIG *SPI_CONFIG );
void MCAL_SPI_DEINIT(SPI_Typedef *SPIx );
void MCAL_SPI_GPIO_SETPIN(SPI_Typedef *SPIx );
void MCAL_SPI_SEND(SPI_Typedef *SPIx, uint16_t *PTX_BUFFER,enum POLLING_MECHASIM POLLINGEN );
void MCAL_SPI_RECIEVE(SPI_Typedef *SPIx, uint16_t *PTX_BUFFER,enum POLLING_MECHASIM POLLINGEN );
void MCAL_SPI_TX_RX(SPI_Typedef *SPIx, uint16_t *PTX_BUFFER,enum POLLING_MECHASIM POLLINGEN );

#endif /* INC_STM32F103C6_SPI_DRIVER_H_ */
