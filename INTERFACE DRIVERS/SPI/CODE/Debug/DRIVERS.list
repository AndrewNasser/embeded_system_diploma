
DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e64  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000f94  08000f94  00010f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fb0  08000fb0  00010fb8  2**0
                  CONTENTS
  4 .ARM          00000000  08000fb0  08000fb0  00010fb8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fb0  08000fb8  00010fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fb0  08000fb0  00010fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fb4  08000fb4  00010fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000fb8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000fb8  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000516f  00000000  00000000  00010fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ccf  00000000  00000000  00016150  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d60  00000000  00000000  00016e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  00017b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00017db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f74  00000000  00000000  00017f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002dd3  00000000  00000000  00018eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b79d  00000000  00000000  0001bcbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002745c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006f8  00000000  00000000  000274d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f7c 	.word	0x08000f7c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f7c 	.word	0x08000f7c

08000170 <EXTI0_IRQHandler>:


//============================================================ISR FUNCTION========================================================//
//=======================================================(INTERRUPT SERVICE ROUTINE)======================================================//

void EXTI0_IRQHandler(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	//CLEAR THE INTERRUPT FROM PENDING REGISTER TO NOT STILL FOUND FOR CPU!!
	EXTI->PR = 1<<0;		//FOR EXTI0
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <EXTI0_IRQHandler+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	615a      	str	r2, [r3, #20]

	//CALL IRQ CALLBACK
	GP_IRQ_CALLBACK[0]();
 800017a:	4b03      	ldr	r3, [pc, #12]	; (8000188 <EXTI0_IRQHandler+0x18>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4798      	blx	r3
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40010400 	.word	0x40010400
 8000188:	20000028 	.word	0x20000028

0800018c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0

	//CLEAR THE INTERRUPT FROM PENDING REGISTER TO NOT STILL FOUND FOR CPU!!
		EXTI->PR |= (1<<1);		//FOR EXTI1
 8000190:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <EXTI1_IRQHandler+0x1c>)
 8000192:	695b      	ldr	r3, [r3, #20]
 8000194:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <EXTI1_IRQHandler+0x1c>)
 8000196:	f043 0302 	orr.w	r3, r3, #2
 800019a:	6153      	str	r3, [r2, #20]

		//CALL IRQ CALLBACK
		GP_IRQ_CALLBACK[1]();
 800019c:	4b03      	ldr	r3, [pc, #12]	; (80001ac <EXTI1_IRQHandler+0x20>)
 800019e:	685b      	ldr	r3, [r3, #4]
 80001a0:	4798      	blx	r3

}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010400 	.word	0x40010400
 80001ac:	20000028 	.word	0x20000028

080001b0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0

	//CLEAR THE INTERRUPT FROM PENDING REGISTER TO NOT STILL FOUND FOR CPU!!
		EXTI->PR |= (1<<2);		//FOR EXTI2
 80001b4:	4b05      	ldr	r3, [pc, #20]	; (80001cc <EXTI2_IRQHandler+0x1c>)
 80001b6:	695b      	ldr	r3, [r3, #20]
 80001b8:	4a04      	ldr	r2, [pc, #16]	; (80001cc <EXTI2_IRQHandler+0x1c>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6153      	str	r3, [r2, #20]

		//CALL IRQ CALLBACK
		GP_IRQ_CALLBACK[2]();
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <EXTI2_IRQHandler+0x20>)
 80001c2:	689b      	ldr	r3, [r3, #8]
 80001c4:	4798      	blx	r3

}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010400 	.word	0x40010400
 80001d0:	20000028 	.word	0x20000028

080001d4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	//CLEAR THE INTERRUPT FROM PENDING REGISTER TO NOT STILL FOUND FOR CPU!!
		EXTI->PR |= (1<<3);		//FOR EXTI3
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <EXTI3_IRQHandler+0x1c>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <EXTI3_IRQHandler+0x1c>)
 80001de:	f043 0308 	orr.w	r3, r3, #8
 80001e2:	6153      	str	r3, [r2, #20]

		//CALL IRQ CALLBACK
		GP_IRQ_CALLBACK[3]();
 80001e4:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <EXTI3_IRQHandler+0x20>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	4798      	blx	r3

}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40010400 	.word	0x40010400
 80001f4:	20000028 	.word	0x20000028

080001f8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

	//CLEAR THE INTERRUPT FROM PENDING REGISTER TO NOT STILL FOUND FOR CPU!!
		EXTI->PR |= (1<<4);		//FOR EXTI4
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <EXTI4_IRQHandler+0x1c>)
 80001fe:	695b      	ldr	r3, [r3, #20]
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <EXTI4_IRQHandler+0x1c>)
 8000202:	f043 0310 	orr.w	r3, r3, #16
 8000206:	6153      	str	r3, [r2, #20]

		//CALL IRQ CALLBACK
		GP_IRQ_CALLBACK[4]();
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <EXTI4_IRQHandler+0x20>)
 800020a:	691b      	ldr	r3, [r3, #16]
 800020c:	4798      	blx	r3


}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40010400 	.word	0x40010400
 8000218:	20000028 	.word	0x20000028

0800021c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){ EXTI->PR |= (1<<5) ;	GP_IRQ_CALLBACK[5](); }
 8000220:	4b26      	ldr	r3, [pc, #152]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	f003 0320 	and.w	r3, r3, #32
 8000228:	2b00      	cmp	r3, #0
 800022a:	d008      	beq.n	800023e <EXTI9_5_IRQHandler+0x22>
 800022c:	4b23      	ldr	r3, [pc, #140]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	4a22      	ldr	r2, [pc, #136]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 8000232:	f043 0320 	orr.w	r3, r3, #32
 8000236:	6153      	str	r3, [r2, #20]
 8000238:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <EXTI9_5_IRQHandler+0xa4>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= (1<<6) ;	GP_IRQ_CALLBACK[6](); }
 800023e:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000246:	2b00      	cmp	r3, #0
 8000248:	d008      	beq.n	800025c <EXTI9_5_IRQHandler+0x40>
 800024a:	4b1c      	ldr	r3, [pc, #112]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	4a1b      	ldr	r2, [pc, #108]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 8000250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000254:	6153      	str	r3, [r2, #20]
 8000256:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <EXTI9_5_IRQHandler+0xa4>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= (1<<7) ;	GP_IRQ_CALLBACK[7](); }
 800025c:	4b17      	ldr	r3, [pc, #92]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000264:	2b00      	cmp	r3, #0
 8000266:	d008      	beq.n	800027a <EXTI9_5_IRQHandler+0x5e>
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 800026a:	695b      	ldr	r3, [r3, #20]
 800026c:	4a13      	ldr	r2, [pc, #76]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 800026e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000272:	6153      	str	r3, [r2, #20]
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <EXTI9_5_IRQHandler+0xa4>)
 8000276:	69db      	ldr	r3, [r3, #28]
 8000278:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= (1<<8) ;	GP_IRQ_CALLBACK[8](); }
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000282:	2b00      	cmp	r3, #0
 8000284:	d008      	beq.n	8000298 <EXTI9_5_IRQHandler+0x7c>
 8000286:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 800028c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <EXTI9_5_IRQHandler+0xa4>)
 8000294:	6a1b      	ldr	r3, [r3, #32]
 8000296:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= (1<<9) ;	GP_IRQ_CALLBACK[9](); }
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 800029a:	695b      	ldr	r3, [r3, #20]
 800029c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d008      	beq.n	80002b6 <EXTI9_5_IRQHandler+0x9a>
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <EXTI9_5_IRQHandler+0xa0>)
 80002aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ae:	6153      	str	r3, [r2, #20]
 80002b0:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <EXTI9_5_IRQHandler+0xa4>)
 80002b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b4:	4798      	blx	r3
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40010400 	.word	0x40010400
 80002c0:	20000028 	.word	0x20000028

080002c4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

	if(EXTI->PR & 1<<10){ EXTI->PR |= (1<<10) ;	GP_IRQ_CALLBACK[10](); }
 80002c8:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d008      	beq.n	80002e6 <EXTI15_10_IRQHandler+0x22>
 80002d4:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a29      	ldr	r2, [pc, #164]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 80002da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002de:	6153      	str	r3, [r2, #20]
 80002e0:	4b28      	ldr	r3, [pc, #160]	; (8000384 <EXTI15_10_IRQHandler+0xc0>)
 80002e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002e4:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= (1<<11) ;	GP_IRQ_CALLBACK[11](); }
 80002e6:	4b26      	ldr	r3, [pc, #152]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d008      	beq.n	8000304 <EXTI15_10_IRQHandler+0x40>
 80002f2:	4b23      	ldr	r3, [pc, #140]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a22      	ldr	r2, [pc, #136]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 80002f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <EXTI15_10_IRQHandler+0xc0>)
 8000300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000302:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= (1<<12) ;	GP_IRQ_CALLBACK[12](); }
 8000304:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800030c:	2b00      	cmp	r3, #0
 800030e:	d008      	beq.n	8000322 <EXTI15_10_IRQHandler+0x5e>
 8000310:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a1a      	ldr	r2, [pc, #104]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 8000316:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800031a:	6153      	str	r3, [r2, #20]
 800031c:	4b19      	ldr	r3, [pc, #100]	; (8000384 <EXTI15_10_IRQHandler+0xc0>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= (1<<13) ;	GP_IRQ_CALLBACK[13](); }
 8000322:	4b17      	ldr	r3, [pc, #92]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800032a:	2b00      	cmp	r3, #0
 800032c:	d008      	beq.n	8000340 <EXTI15_10_IRQHandler+0x7c>
 800032e:	4b14      	ldr	r3, [pc, #80]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a13      	ldr	r2, [pc, #76]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 8000334:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000338:	6153      	str	r3, [r2, #20]
 800033a:	4b12      	ldr	r3, [pc, #72]	; (8000384 <EXTI15_10_IRQHandler+0xc0>)
 800033c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800033e:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= (1<<14) ;	GP_IRQ_CALLBACK[14](); }
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000348:	2b00      	cmp	r3, #0
 800034a:	d008      	beq.n	800035e <EXTI15_10_IRQHandler+0x9a>
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 8000352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000356:	6153      	str	r3, [r2, #20]
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <EXTI15_10_IRQHandler+0xc0>)
 800035a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800035c:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= (1<<15) ;	GP_IRQ_CALLBACK[15](); }
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000366:	2b00      	cmp	r3, #0
 8000368:	d008      	beq.n	800037c <EXTI15_10_IRQHandler+0xb8>
 800036a:	4b05      	ldr	r3, [pc, #20]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <EXTI15_10_IRQHandler+0xbc>)
 8000370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b03      	ldr	r3, [pc, #12]	; (8000384 <EXTI15_10_IRQHandler+0xc0>)
 8000378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800037a:	4798      	blx	r3

}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40010400 	.word	0x40010400
 8000384:	20000028 	.word	0x20000028

08000388 <GET_CRLH_POSITION>:
 * PARAM1[IN]----> NUMBER OF PIN
 * RETAVAL	 ----> POSITION IN CR REGISTER
 * NOTE		 ----> EACH PIN HAVE 4 BIT IN CR REGISTER
 *
 */
uint8_t GET_CRLH_POSITION(uint16_t PINNUMBER){
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	80fb      	strh	r3, [r7, #6]
	switch(PINNUMBER){
 8000392:	88fb      	ldrh	r3, [r7, #6]
 8000394:	2b80      	cmp	r3, #128	; 0x80
 8000396:	d042      	beq.n	800041e <GET_CRLH_POSITION+0x96>
 8000398:	2b80      	cmp	r3, #128	; 0x80
 800039a:	dc11      	bgt.n	80003c0 <GET_CRLH_POSITION+0x38>
 800039c:	2b08      	cmp	r3, #8
 800039e:	d036      	beq.n	800040e <GET_CRLH_POSITION+0x86>
 80003a0:	2b08      	cmp	r3, #8
 80003a2:	dc06      	bgt.n	80003b2 <GET_CRLH_POSITION+0x2a>
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d02e      	beq.n	8000406 <GET_CRLH_POSITION+0x7e>
 80003a8:	2b04      	cmp	r3, #4
 80003aa:	d02e      	beq.n	800040a <GET_CRLH_POSITION+0x82>
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d028      	beq.n	8000402 <GET_CRLH_POSITION+0x7a>
 80003b0:	e047      	b.n	8000442 <GET_CRLH_POSITION+0xba>
 80003b2:	2b20      	cmp	r3, #32
 80003b4:	d02f      	beq.n	8000416 <GET_CRLH_POSITION+0x8e>
 80003b6:	2b40      	cmp	r3, #64	; 0x40
 80003b8:	d02f      	beq.n	800041a <GET_CRLH_POSITION+0x92>
 80003ba:	2b10      	cmp	r3, #16
 80003bc:	d029      	beq.n	8000412 <GET_CRLH_POSITION+0x8a>
 80003be:	e040      	b.n	8000442 <GET_CRLH_POSITION+0xba>
 80003c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003c4:	d033      	beq.n	800042e <GET_CRLH_POSITION+0xa6>
 80003c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003ca:	dc09      	bgt.n	80003e0 <GET_CRLH_POSITION+0x58>
 80003cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d0:	d029      	beq.n	8000426 <GET_CRLH_POSITION+0x9e>
 80003d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003d6:	d028      	beq.n	800042a <GET_CRLH_POSITION+0xa2>
 80003d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003dc:	d021      	beq.n	8000422 <GET_CRLH_POSITION+0x9a>
 80003de:	e030      	b.n	8000442 <GET_CRLH_POSITION+0xba>
 80003e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003e4:	d027      	beq.n	8000436 <GET_CRLH_POSITION+0xae>
 80003e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ea:	dc03      	bgt.n	80003f4 <GET_CRLH_POSITION+0x6c>
 80003ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f0:	d01f      	beq.n	8000432 <GET_CRLH_POSITION+0xaa>
 80003f2:	e026      	b.n	8000442 <GET_CRLH_POSITION+0xba>
 80003f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003f8:	d01f      	beq.n	800043a <GET_CRLH_POSITION+0xb2>
 80003fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003fe:	d01e      	beq.n	800043e <GET_CRLH_POSITION+0xb6>
 8000400:	e01f      	b.n	8000442 <GET_CRLH_POSITION+0xba>

	case GPIO_PIN0:
		return 0;
 8000402:	2300      	movs	r3, #0
 8000404:	e01e      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 8000406:	2304      	movs	r3, #4
 8000408:	e01c      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 800040a:	2308      	movs	r3, #8
 800040c:	e01a      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 800040e:	230c      	movs	r3, #12
 8000410:	e018      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 8000412:	2310      	movs	r3, #16
 8000414:	e016      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 8000416:	2314      	movs	r3, #20
 8000418:	e014      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 800041a:	2318      	movs	r3, #24
 800041c:	e012      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 800041e:	231c      	movs	r3, #28
 8000420:	e010      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 8000422:	2300      	movs	r3, #0
 8000424:	e00e      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 8000426:	2304      	movs	r3, #4
 8000428:	e00c      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 800042a:	2308      	movs	r3, #8
 800042c:	e00a      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 800042e:	230c      	movs	r3, #12
 8000430:	e008      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 8000432:	2310      	movs	r3, #16
 8000434:	e006      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 8000436:	2314      	movs	r3, #20
 8000438:	e004      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 800043a:	2318      	movs	r3, #24
 800043c:	e002      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 800043e:	231c      	movs	r3, #28
 8000440:	e000      	b.n	8000444 <GET_CRLH_POSITION+0xbc>
		break;


	}
	return 0;
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr

0800044e <MCAL_GPIO_INIT>:
 * RETAVAL	 ----> NONE
 * NOTE		 ----> NONE
 *
 */

void MCAL_GPIO_INIT(GPIO_Typedef *GPIOx ,GPIO_PINCONFIG_T *PINCONFIG ){
 800044e:	b590      	push	{r4, r7, lr}
 8000450:	b085      	sub	sp, #20
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	6039      	str	r1, [r7, #0]

	uint8_t PIN_CONFIG=0;
 8000458:	2300      	movs	r3, #0
 800045a:	73fb      	strb	r3, [r7, #15]


	//PORT CONFIG REGISTER LOW  (GPIOx_CRL) CONFIGURE PINS [0:7]
	//PORT CONFIG REGISTER HIGH (GPIOx_CRH) CONFIGURE PINS [8:15]

	volatile uint32_t *REGISTERCONFIG=NULL;
 800045c:	2300      	movs	r3, #0
 800045e:	60bb      	str	r3, [r7, #8]

	REGISTERCONFIG=(PINCONFIG->GPIO_PIN_NUMBER < GPIO_PIN8)? &GPIOx->CRL : &GPIOx->CRH;	//GPIO POINTING TO CR_LOW IF PIN NUMBER < 8 -->[0:7]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	2bff      	cmp	r3, #255	; 0xff
 8000466:	d801      	bhi.n	800046c <MCAL_GPIO_INIT+0x1e>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	e001      	b.n	8000470 <MCAL_GPIO_INIT+0x22>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3304      	adds	r3, #4
 8000470:	60bb      	str	r3, [r7, #8]

	//CLEAR CNFy[1:0] & MODEy[1:0]
	(*REGISTERCONFIG) &= ~(0xf << GET_CRLH_POSITION(PINCONFIG->GPIO_PIN_NUMBER));
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff86 	bl	8000388 <GET_CRLH_POSITION>
 800047c:	4603      	mov	r3, r0
 800047e:	461a      	mov	r2, r3
 8000480:	230f      	movs	r3, #15
 8000482:	4093      	lsls	r3, r2
 8000484:	43da      	mvns	r2, r3
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	401a      	ands	r2, r3
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	601a      	str	r2, [r3, #0]

	//CHECK PIN IS OUTPUT TO USE MODE OF SPEED
	if((PINCONFIG->GPIO_MODE == GPIO_MODE_PUSH_PULL) || (PINCONFIG->GPIO_MODE == GPIO_MODE_OPEN_DRAIN) || (PINCONFIG->GPIO_MODE == GPIO_MODE_AF_PUSH_PULL) || (PINCONFIG->GPIO_MODE == GPIO_MODE_AF_OPEN_DRAIN)){
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	789b      	ldrb	r3, [r3, #2]
 8000494:	2b04      	cmp	r3, #4
 8000496:	d00b      	beq.n	80004b0 <MCAL_GPIO_INIT+0x62>
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b05      	cmp	r3, #5
 800049e:	d007      	beq.n	80004b0 <MCAL_GPIO_INIT+0x62>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d003      	beq.n	80004b0 <MCAL_GPIO_INIT+0x62>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	2b07      	cmp	r3, #7
 80004ae:	d10e      	bne.n	80004ce <MCAL_GPIO_INIT+0x80>

		/*USED -4 BECAUSE THE MODES DEFINED WHEN WE ABSTRACT 4 WE GET THE VALUE SHOULD BE AT REGISTER
		 EXAMBLE USING PUSH PULL MODE FROM MACROS 0x00000004 - 4 = 0x00000000 RHAT WHAT WE WANT ACCORDING SPICS*/

		PIN_CONFIG=((((PINCONFIG->GPIO_MODE - 4) <<2 )|(PINCONFIG->GPIO_SPEED_OUTPUT)) &0x0f);
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	3b04      	subs	r3, #4
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	b25a      	sxtb	r2, r3
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	78db      	ldrb	r3, [r3, #3]
 80004be:	b25b      	sxtb	r3, r3
 80004c0:	4313      	orrs	r3, r2
 80004c2:	b25b      	sxtb	r3, r3
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	f003 030f 	and.w	r3, r3, #15
 80004ca:	73fb      	strb	r3, [r7, #15]
 80004cc:	e02c      	b.n	8000528 <MCAL_GPIO_INIT+0xda>
	}
	//THAT THE PIN IS INPUT & MODE OF SPEED AT RESET STATE
	else{
		if((PINCONFIG->GPIO_MODE==GPIO_MODE_ANALOG) || (PINCONFIG->GPIO_MODE==GPIO_MODE_FLOATING) ){
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	789b      	ldrb	r3, [r3, #2]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d003      	beq.n	80004de <MCAL_GPIO_INIT+0x90>
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d107      	bne.n	80004ee <MCAL_GPIO_INIT+0xa0>
			PIN_CONFIG=((((PINCONFIG->GPIO_MODE) <<2 )) & 0x0f);
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	f003 030f 	and.w	r3, r3, #15
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	e01c      	b.n	8000528 <MCAL_GPIO_INIT+0xda>
		}else if (PINCONFIG->GPIO_MODE == GPIO_MODE_AF_INPUT )		//CONSIDER ALTERNATIVE FUNCTIO AS INPUT FLOATING
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	789b      	ldrb	r3, [r3, #2]
 80004f2:	2b08      	cmp	r3, #8
 80004f4:	d102      	bne.n	80004fc <MCAL_GPIO_INIT+0xae>
		{
			PIN_CONFIG=(((GPIO_MODE_FLOATING )) & 0x0f);
 80004f6:	2301      	movs	r3, #1
 80004f8:	73fb      	strb	r3, [r7, #15]
 80004fa:	e015      	b.n	8000528 <MCAL_GPIO_INIT+0xda>

		}
		else  //PULL UP PELL DOWN INPUT MODE
		{
			PIN_CONFIG=(((GPIO_MODE_PULLUP)| 0x0) & 0x0f);
 80004fc:	2302      	movs	r3, #2
 80004fe:	73fb      	strb	r3, [r7, #15]
			//FROM TABLE 20 REFERED TO ODR REGISTER IS( 0 @ PULL UP) & (1 @ PULL DOWN)
			if(PINCONFIG->GPIO_MODE == GPIO_MODE_PULLUP)
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	789b      	ldrb	r3, [r3, #2]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d107      	bne.n	8000518 <MCAL_GPIO_INIT+0xca>
			{
				GPIOx->ODR |= PINCONFIG->GPIO_PIN_NUMBER;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	8812      	ldrh	r2, [r2, #0]
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	e007      	b.n	8000528 <MCAL_GPIO_INIT+0xda>

			}else {
				GPIOx->ODR &= ~(PINCONFIG->GPIO_PIN_NUMBER);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	8812      	ldrh	r2, [r2, #0]
 8000520:	43d2      	mvns	r2, r2
 8000522:	401a      	ands	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	60da      	str	r2, [r3, #12]
			}

		}

	}
	(*REGISTERCONFIG) |= ((PIN_CONFIG) << GET_CRLH_POSITION(PINCONFIG->GPIO_PIN_NUMBER));
 8000528:	7bfc      	ldrb	r4, [r7, #15]
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ff2a 	bl	8000388 <GET_CRLH_POSITION>
 8000534:	4603      	mov	r3, r0
 8000536:	fa04 f203 	lsl.w	r2, r4, r3
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	431a      	orrs	r2, r3
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	601a      	str	r2, [r3, #0]

}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	bd90      	pop	{r4, r7, pc}

0800054c <MCAL_GPIO_WRITEPIN>:
 * RETAVAL	 ----> NONE
 * NOTE		 ----> NONE
 *
 */

void MCAL_GPIO_WRITEPIN(GPIO_Typedef *GPIOx ,uint16_t PIN_NUMBER , uint8_t VAL ){
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	807b      	strh	r3, [r7, #2]
 8000558:	4613      	mov	r3, r2
 800055a:	707b      	strb	r3, [r7, #1]
	if(VAL != GPIO_PIN_RESET){
 800055c:	787b      	ldrb	r3, [r7, #1]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d003      	beq.n	800056a <MCAL_GPIO_WRITEPIN+0x1e>
		//GPIOx->ODR |= PIN_NUMBER;
		GPIOx->BSSR = PIN_NUMBER;     	  //0: No action on the corresponding ODRx bit  1: Reset the corresponding ODRx bi
 8000562:	887a      	ldrh	r2, [r7, #2]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	611a      	str	r2, [r3, #16]

	}else{
		GPIOx->BRR = PIN_NUMBER;		 //0: No action on the corresponding ODRx bit  1: Reset the corresponding ODRx bi
	}
}
 8000568:	e002      	b.n	8000570 <MCAL_GPIO_WRITEPIN+0x24>
		GPIOx->BRR = PIN_NUMBER;		 //0: No action on the corresponding ODRx bit  1: Reset the corresponding ODRx bi
 800056a:	887a      	ldrh	r2, [r7, #2]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	615a      	str	r2, [r3, #20]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
	...

0800057c <MCAL_RCC_SYSCLCK_GETFREQ>:
 * RETAVAL	 ----> POSITION IN CR REGISTER
 * NOTE		 ----> EACH PIN HAVE 4 BIT IN CR REGISTER
 *
 */

 uint32_t MCAL_RCC_SYSCLCK_GETFREQ(void){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	 switch((RCC->CFGR >> 2) & 0b11){
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <MCAL_RCC_SYSCLCK_GETFREQ+0x30>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	089b      	lsrs	r3, r3, #2
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	2b01      	cmp	r3, #1
 800058c:	d006      	beq.n	800059c <MCAL_RCC_SYSCLCK_GETFREQ+0x20>
 800058e:	2b01      	cmp	r3, #1
 8000590:	d302      	bcc.n	8000598 <MCAL_RCC_SYSCLCK_GETFREQ+0x1c>
 8000592:	2b02      	cmp	r3, #2
 8000594:	d004      	beq.n	80005a0 <MCAL_RCC_SYSCLCK_GETFREQ+0x24>
 8000596:	e005      	b.n	80005a4 <MCAL_RCC_SYSCLCK_GETFREQ+0x28>
		 case 0:
			 return HSI_CLCK;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MCAL_RCC_SYSCLCK_GETFREQ+0x34>)
 800059a:	e003      	b.n	80005a4 <MCAL_RCC_SYSCLCK_GETFREQ+0x28>
			 break;
		 case 1:
			 return HSE_CLCK;
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <MCAL_RCC_SYSCLCK_GETFREQ+0x38>)
 800059e:	e001      	b.n	80005a4 <MCAL_RCC_SYSCLCK_GETFREQ+0x28>
			 break;
		 case 2:
			 return 16000000;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <MCAL_RCC_SYSCLCK_GETFREQ+0x34>)
 80005a2:	e7ff      	b.n	80005a4 <MCAL_RCC_SYSCLCK_GETFREQ+0x28>
			 break;
	 }

 }
 80005a4:	4618      	mov	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000
 80005b0:	00f42400 	.word	0x00f42400
 80005b4:	007a1200 	.word	0x007a1200

080005b8 <MCAL_RCC_HCLCK_GETFREQ>:
 uint32_t MCAL_RCC_HCLCK_GETFREQ(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
 	 return (MCAL_RCC_SYSCLCK_GETFREQ()	>>	AHBPRESC_TABLE[(RCC->CFGR >> 4) & 0xF]);
 80005bc:	f7ff ffde 	bl	800057c <MCAL_RCC_SYSCLCK_GETFREQ>
 80005c0:	4601      	mov	r1, r0
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <MCAL_RCC_HCLCK_GETFREQ+0x20>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	091b      	lsrs	r3, r3, #4
 80005c8:	f003 030f 	and.w	r3, r3, #15
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <MCAL_RCC_HCLCK_GETFREQ+0x24>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	fa21 f303 	lsr.w	r3, r1, r3

 }
 80005d4:	4618      	mov	r0, r3
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	08000f9c 	.word	0x08000f9c

080005e0 <MCAL_RCC_PCLCK1_GETFREQ>:

 uint32_t MCAL_RCC_PCLCK1_GETFREQ(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	 	 return (MCAL_RCC_HCLCK_GETFREQ()	>>	APBPRESC_TABLE[(RCC->CFGR >> 8) & 0b111]);
 80005e4:	f7ff ffe8 	bl	80005b8 <MCAL_RCC_HCLCK_GETFREQ>
 80005e8:	4601      	mov	r1, r0
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <MCAL_RCC_PCLCK1_GETFREQ+0x20>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	f003 0307 	and.w	r3, r3, #7
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <MCAL_RCC_PCLCK1_GETFREQ+0x24>)
 80005f6:	5cd3      	ldrb	r3, [r2, r3]
 80005f8:	fa21 f303 	lsr.w	r3, r1, r3
 }
 80005fc:	4618      	mov	r0, r3
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	08000f94 	.word	0x08000f94

08000608 <MCAL_RCC_PCLCK2_GETFREQ>:
 uint32_t MCAL_RCC_PCLCK2_GETFREQ(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
		return (MCAL_RCC_HCLCK_GETFREQ()	>>	APBPRESC_TABLE[(RCC->CFGR >> 11) & 0b111]);
 800060c:	f7ff ffd4 	bl	80005b8 <MCAL_RCC_HCLCK_GETFREQ>
 8000610:	4601      	mov	r1, r0
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MCAL_RCC_PCLCK2_GETFREQ+0x20>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	0adb      	lsrs	r3, r3, #11
 8000618:	f003 0307 	and.w	r3, r3, #7
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <MCAL_RCC_PCLCK2_GETFREQ+0x24>)
 800061e:	5cd3      	ldrb	r3, [r2, r3]
 8000620:	fa21 f303 	lsr.w	r3, r1, r3

 }
 8000624:	4618      	mov	r0, r3
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000
 800062c:	08000f94 	.word	0x08000f94

08000630 <MCAL_SPI_INIT>:
 * PARAM1[IN]----> CONFIG ALL SPI CONFIGURATION
 * RETAVAL	 ----> NONE
 * NOTE		 ----> SUPPORT SPI FULL DUPLEX MASTER/SLAVE , NSS HW/SW FOR SLAVE
 *
 */
void MCAL_SPI_INIT(SPI_Typedef *SPIx ,SPI_CONFIG *SPI_CONFIG ){
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]

	//SAFETY FOR REGISTER TO BUFFER NOT WORK UNTIL U WRITE IN REGISTER
	uint16_t TEMP_CR1=0;
 800063a:	2300      	movs	r3, #0
 800063c:	81fb      	strh	r3, [r7, #14]
	uint16_t TEMP_CR2=0;
 800063e:	2300      	movs	r3, #0
 8000640:	81bb      	strh	r3, [r7, #12]



		if(SPIx==SPI1){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a3b      	ldr	r2, [pc, #236]	; (8000734 <MCAL_SPI_INIT+0x104>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d109      	bne.n	800065e <MCAL_SPI_INIT+0x2e>
			RCC_SPI1_CLK_EN();
 800064a:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <MCAL_SPI_INIT+0x108>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a3a      	ldr	r2, [pc, #232]	; (8000738 <MCAL_SPI_INIT+0x108>)
 8000650:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000654:	6193      	str	r3, [r2, #24]
			SPI_GLOBAL[SPI1_INDEX] = SPI_CONFIG;
 8000656:	4a39      	ldr	r2, [pc, #228]	; (800073c <MCAL_SPI_INIT+0x10c>)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	e00c      	b.n	8000678 <MCAL_SPI_INIT+0x48>
		}
		else if(SPIx==SPI2){
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a37      	ldr	r2, [pc, #220]	; (8000740 <MCAL_SPI_INIT+0x110>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d108      	bne.n	8000678 <MCAL_SPI_INIT+0x48>
			RCC_SPI2_CLK_EN();
 8000666:	4b34      	ldr	r3, [pc, #208]	; (8000738 <MCAL_SPI_INIT+0x108>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a33      	ldr	r2, [pc, #204]	; (8000738 <MCAL_SPI_INIT+0x108>)
 800066c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000670:	61d3      	str	r3, [r2, #28]
			SPI_GLOBAL[SPI2_INDEX] = SPI_CONFIG;
 8000672:	4a32      	ldr	r2, [pc, #200]	; (800073c <MCAL_SPI_INIT+0x10c>)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	6053      	str	r3, [r2, #4]
		}

	//ENABLE SPI FROM SPI_CR1 REGISTER
		TEMP_CR1=(0x1U <<6);
 8000678:	2340      	movs	r3, #64	; 0x40
 800067a:	81fb      	strh	r3, [r7, #14]

	//MASTER OR SLAVE MODE
		TEMP_CR1 |= SPI_CONFIG->SPI_DEVICE_MODE;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	881a      	ldrh	r2, [r3, #0]
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	4313      	orrs	r3, r2
 8000684:	81fb      	strh	r3, [r7, #14]

	//SPI COMMUNICATION MODE
		TEMP_CR1 |= SPI_CONFIG->SPI_COMMUNICATION_MODE;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	885a      	ldrh	r2, [r3, #2]
 800068a:	89fb      	ldrh	r3, [r7, #14]
 800068c:	4313      	orrs	r3, r2
 800068e:	81fb      	strh	r3, [r7, #14]

	//SPI FRAME FORMAT
		TEMP_CR1 |= SPI_CONFIG->SPI_FRAME_FORMAT;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	889a      	ldrh	r2, [r3, #4]
 8000694:	89fb      	ldrh	r3, [r7, #14]
 8000696:	4313      	orrs	r3, r2
 8000698:	81fb      	strh	r3, [r7, #14]

	//SPI DATA SIZ
		TEMP_CR1 |= SPI_CONFIG->SPI_DATA_SIZE;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	88da      	ldrh	r2, [r3, #6]
 800069e:	89fb      	ldrh	r3, [r7, #14]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	81fb      	strh	r3, [r7, #14]

	//SPI CLOCK POLARITY
		TEMP_CR1 |= SPI_CONFIG->SPI_CLCK_POLARITY;
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	891a      	ldrh	r2, [r3, #8]
 80006a8:	89fb      	ldrh	r3, [r7, #14]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	81fb      	strh	r3, [r7, #14]

	//SPI CLOCK PHASE
		TEMP_CR1 |= SPI_CONFIG->SPI__CLCK_PHASE;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	895a      	ldrh	r2, [r3, #10]
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	81fb      	strh	r3, [r7, #14]

	//SPI NSS


		if(SPI_CONFIG->SPI_NSS == SPI_NSS_HW_MASTER_OUTPUT_EN){
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	899b      	ldrh	r3, [r3, #12]
 80006bc:	2b04      	cmp	r3, #4
 80006be:	d105      	bne.n	80006cc <MCAL_SPI_INIT+0x9c>
			TEMP_CR2 |= SPI_CONFIG->SPI_NSS;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	899a      	ldrh	r2, [r3, #12]
 80006c4:	89bb      	ldrh	r3, [r7, #12]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	81bb      	strh	r3, [r7, #12]
 80006ca:	e004      	b.n	80006d6 <MCAL_SPI_INIT+0xa6>
		}
		else if(SPI_CONFIG->SPI_NSS == SPI_NSS_HW_MASTER_OUTPUT_DISEN){
			TEMP_CR2 &= SPI_CONFIG->SPI_NSS;
		}
		else{
			TEMP_CR1 |= SPI_CONFIG->SPI_NSS;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	899a      	ldrh	r2, [r3, #12]
 80006d0:	89fb      	ldrh	r3, [r7, #14]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	81fb      	strh	r3, [r7, #14]
		}

	//SPI BAUD RATE
		TEMP_CR1 |= SPI_CONFIG->SPI_BAUDRATE;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	89da      	ldrh	r2, [r3, #14]
 80006da:	89fb      	ldrh	r3, [r7, #14]
 80006dc:	4313      	orrs	r3, r2
 80006de:	81fb      	strh	r3, [r7, #14]

	//SPI INTERRUPT
		if(SPI_CONFIG->SPI_IRQ_ENABLE != SPI_IRQ_EN_NONE){
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	8a1b      	ldrh	r3, [r3, #16]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d019      	beq.n	800071c <MCAL_SPI_INIT+0xec>
			TEMP_CR2 |= SPI_CONFIG->SPI_IRQ_ENABLE;
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	8a1a      	ldrh	r2, [r3, #16]
 80006ec:	89bb      	ldrh	r3, [r7, #12]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	81bb      	strh	r3, [r7, #12]

			if(SPIx==SPI1){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <MCAL_SPI_INIT+0x104>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <MCAL_SPI_INIT+0xd8>
				NVIC_IRQ35_SPI1_ENABLE;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MCAL_SPI_INIT+0x114>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a11      	ldr	r2, [pc, #68]	; (8000744 <MCAL_SPI_INIT+0x114>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	e009      	b.n	800071c <MCAL_SPI_INIT+0xec>
			}
			else if(SPIx==SPI2){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <MCAL_SPI_INIT+0x110>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d105      	bne.n	800071c <MCAL_SPI_INIT+0xec>
				NVIC_IRQ36_SPI2_ENABLE;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MCAL_SPI_INIT+0x114>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <MCAL_SPI_INIT+0x114>)
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	6013      	str	r3, [r2, #0]


		}


		SPIx->CR1 = TEMP_CR1;
 800071c:	89fa      	ldrh	r2, [r7, #14]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
		SPIx->CR2 = TEMP_CR2;
 8000722:	89ba      	ldrh	r2, [r7, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	605a      	str	r2, [r3, #4]

}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40013000 	.word	0x40013000
 8000738:	40021000 	.word	0x40021000
 800073c:	2000001c 	.word	0x2000001c
 8000740:	40003c00 	.word	0x40003c00
 8000744:	e000e104 	.word	0xe000e104

08000748 <MCAL_SPI_GPIO_SETPIN>:
 * PARAM1[IN]----> USART X WHICH X CAN BE 1,2,3
 * RETAVAL	 ---->NONE
 * NOTE		 ----> NONE
 *
 */
void MCAL_SPI_GPIO_SETPIN(SPI_Typedef *SPIx ){
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	GPIO_PINCONFIG_T PINCFG ;


 if(SPIx == SPI1){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a7b      	ldr	r2, [pc, #492]	; (8000940 <MCAL_SPI_GPIO_SETPIN+0x1f8>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d171      	bne.n	800083c <MCAL_SPI_GPIO_SETPIN+0xf4>

	 //PA4: SPI_NSS     ,   PA5: SPI_CLCK     , PA6: SPI_MISO     , PA7: SPI_MOSI


	 if(SPI_GLOBAL[SPI1_INDEX]->SPI_DEVICE_MODE == SPI_MASTER_MODE){
 8000758:	4b7a      	ldr	r3, [pc, #488]	; (8000944 <MCAL_SPI_GPIO_SETPIN+0x1fc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	2b04      	cmp	r3, #4
 8000760:	d136      	bne.n	80007d0 <MCAL_SPI_GPIO_SETPIN+0x88>

		 switch(SPI_GLOBAL[SPI1_INDEX]->SPI_NSS){
 8000762:	4b78      	ldr	r3, [pc, #480]	; (8000944 <MCAL_SPI_GPIO_SETPIN+0x1fc>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	899b      	ldrh	r3, [r3, #12]
 8000768:	2b04      	cmp	r3, #4
 800076a:	d10c      	bne.n	8000786 <MCAL_SPI_GPIO_SETPIN+0x3e>
				 		 	PINCFG.GPIO_MODE = GPIO_MODE_FLOATING;
				 			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
				 			MCAL_GPIO_INIT(GPIOA, &PINCFG);
		 		 			break;
		 case SPI_NSS_HW_MASTER_OUTPUT_EN:
		 		 	 	 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN4;
 800076c:	2310      	movs	r3, #16
 800076e:	81bb      	strh	r3, [r7, #12]
		 		 			PINCFG.GPIO_MODE = GPIO_MODE_PUSH_PULL;
 8000770:	2304      	movs	r3, #4
 8000772:	73bb      	strb	r3, [r7, #14]
		 		 			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 8000774:	2301      	movs	r3, #1
 8000776:	73fb      	strb	r3, [r7, #15]
		 		 			MCAL_GPIO_INIT(GPIOA, &PINCFG);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4619      	mov	r1, r3
 800077e:	4872      	ldr	r0, [pc, #456]	; (8000948 <MCAL_SPI_GPIO_SETPIN+0x200>)
 8000780:	f7ff fe65 	bl	800044e <MCAL_GPIO_INIT>
		 		 			break;
 8000784:	bf00      	nop
		 }
		 //FOR CLOCK
	 	 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN5;
 8000786:	2320      	movs	r3, #32
 8000788:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL;
 800078a:	2306      	movs	r3, #6
 800078c:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOA, &PINCFG);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	486b      	ldr	r0, [pc, #428]	; (8000948 <MCAL_SPI_GPIO_SETPIN+0x200>)
 800079a:	f7ff fe58 	bl	800044e <MCAL_GPIO_INIT>

		//FOR MISO
	 	 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN6;
 800079e:	2340      	movs	r3, #64	; 0x40
 80007a0:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_FLOATING;
 80007a2:	2301      	movs	r3, #1
 80007a4:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 80007a6:	2301      	movs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOA, &PINCFG);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4865      	ldr	r0, [pc, #404]	; (8000948 <MCAL_SPI_GPIO_SETPIN+0x200>)
 80007b2:	f7ff fe4c 	bl	800044e <MCAL_GPIO_INIT>

		 //FOR MOSI
		 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN7;
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL;
 80007ba:	2306      	movs	r3, #6
 80007bc:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 80007be:	2301      	movs	r3, #1
 80007c0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOA, &PINCFG);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	485f      	ldr	r0, [pc, #380]	; (8000948 <MCAL_SPI_GPIO_SETPIN+0x200>)
 80007ca:	f7ff fe40 	bl	800044e <MCAL_GPIO_INIT>





}
 80007ce:	e0b2      	b.n	8000936 <MCAL_SPI_GPIO_SETPIN+0x1ee>
		 if(SPI_GLOBAL[SPI1_INDEX]->SPI_DEVICE_MODE == SPI_SLAVE_MODE){
 80007d0:	4b5c      	ldr	r3, [pc, #368]	; (8000944 <MCAL_SPI_GPIO_SETPIN+0x1fc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d10b      	bne.n	80007f2 <MCAL_SPI_GPIO_SETPIN+0xaa>
	 		 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN4;
 80007da:	2310      	movs	r3, #16
 80007dc:	81bb      	strh	r3, [r7, #12]
	 		 	PINCFG.GPIO_MODE = GPIO_MODE_FLOATING;
 80007de:	2301      	movs	r3, #1
 80007e0:	73bb      	strb	r3, [r7, #14]
	 			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 80007e2:	2301      	movs	r3, #1
 80007e4:	73fb      	strb	r3, [r7, #15]
	 			MCAL_GPIO_INIT(GPIOA, &PINCFG);
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	4856      	ldr	r0, [pc, #344]	; (8000948 <MCAL_SPI_GPIO_SETPIN+0x200>)
 80007ee:	f7ff fe2e 	bl	800044e <MCAL_GPIO_INIT>
			 	 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN5;
 80007f2:	2320      	movs	r3, #32
 80007f4:	81bb      	strh	r3, [r7, #12]
					PINCFG.GPIO_MODE = GPIO_MODE_FLOATING;
 80007f6:	2301      	movs	r3, #1
 80007f8:	73bb      	strb	r3, [r7, #14]
					PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_INIT(GPIOA, &PINCFG);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4619      	mov	r1, r3
 8000804:	4850      	ldr	r0, [pc, #320]	; (8000948 <MCAL_SPI_GPIO_SETPIN+0x200>)
 8000806:	f7ff fe22 	bl	800044e <MCAL_GPIO_INIT>
			 	 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN6;
 800080a:	2340      	movs	r3, #64	; 0x40
 800080c:	81bb      	strh	r3, [r7, #12]
					PINCFG.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL;
 800080e:	2306      	movs	r3, #6
 8000810:	73bb      	strb	r3, [r7, #14]
					PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 8000812:	2301      	movs	r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_INIT(GPIOA, &PINCFG);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	484a      	ldr	r0, [pc, #296]	; (8000948 <MCAL_SPI_GPIO_SETPIN+0x200>)
 800081e:	f7ff fe16 	bl	800044e <MCAL_GPIO_INIT>
				 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN7;
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	81bb      	strh	r3, [r7, #12]
					PINCFG.GPIO_MODE = GPIO_MODE_FLOATING;
 8000826:	2301      	movs	r3, #1
 8000828:	73bb      	strb	r3, [r7, #14]
					PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 800082a:	2301      	movs	r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_INIT(GPIOA, &PINCFG);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4844      	ldr	r0, [pc, #272]	; (8000948 <MCAL_SPI_GPIO_SETPIN+0x200>)
 8000836:	f7ff fe0a 	bl	800044e <MCAL_GPIO_INIT>
}
 800083a:	e07c      	b.n	8000936 <MCAL_SPI_GPIO_SETPIN+0x1ee>
 else if (SPIx == SPI2){
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a43      	ldr	r2, [pc, #268]	; (800094c <MCAL_SPI_GPIO_SETPIN+0x204>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d178      	bne.n	8000936 <MCAL_SPI_GPIO_SETPIN+0x1ee>
	 if(SPI_GLOBAL[SPI2_INDEX]->SPI_DEVICE_MODE == SPI_MASTER_MODE){
 8000844:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <MCAL_SPI_GPIO_SETPIN+0x1fc>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	2b04      	cmp	r3, #4
 800084c:	d13a      	bne.n	80008c4 <MCAL_SPI_GPIO_SETPIN+0x17c>
		 switch(SPI_GLOBAL[SPI2_INDEX]->SPI_NSS){
 800084e:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <MCAL_SPI_GPIO_SETPIN+0x1fc>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	899b      	ldrh	r3, [r3, #12]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d10d      	bne.n	8000874 <MCAL_SPI_GPIO_SETPIN+0x12c>
		 		 	 	 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN12;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	81bb      	strh	r3, [r7, #12]
		 		 			PINCFG.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL;
 800085e:	2306      	movs	r3, #6
 8000860:	73bb      	strb	r3, [r7, #14]
		 		 			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
		 		 			MCAL_GPIO_INIT(GPIOB, &PINCFG);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	4838      	ldr	r0, [pc, #224]	; (8000950 <MCAL_SPI_GPIO_SETPIN+0x208>)
 800086e:	f7ff fdee 	bl	800044e <MCAL_GPIO_INIT>
		 		 			break;
 8000872:	bf00      	nop
	 	 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN13;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL;
 800087a:	2306      	movs	r3, #6
 800087c:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 800087e:	2301      	movs	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOB, &PINCFG);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	4831      	ldr	r0, [pc, #196]	; (8000950 <MCAL_SPI_GPIO_SETPIN+0x208>)
 800088a:	f7ff fde0 	bl	800044e <MCAL_GPIO_INIT>
	 	 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN14;
 800088e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000892:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_FLOATING;
 8000894:	2301      	movs	r3, #1
 8000896:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 8000898:	2301      	movs	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOB, &PINCFG);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	482b      	ldr	r0, [pc, #172]	; (8000950 <MCAL_SPI_GPIO_SETPIN+0x208>)
 80008a4:	f7ff fdd3 	bl	800044e <MCAL_GPIO_INIT>
		 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN15;
 80008a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ac:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL;
 80008ae:	2306      	movs	r3, #6
 80008b0:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 80008b2:	2301      	movs	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOB, &PINCFG);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4619      	mov	r1, r3
 80008bc:	4824      	ldr	r0, [pc, #144]	; (8000950 <MCAL_SPI_GPIO_SETPIN+0x208>)
 80008be:	f7ff fdc6 	bl	800044e <MCAL_GPIO_INIT>
}
 80008c2:	e038      	b.n	8000936 <MCAL_SPI_GPIO_SETPIN+0x1ee>
		 if(SPI_GLOBAL[SPI2_INDEX]->SPI_DEVICE_MODE == SPI_SLAVE_MODE){
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MCAL_SPI_GPIO_SETPIN+0x1fc>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d10c      	bne.n	80008e8 <MCAL_SPI_GPIO_SETPIN+0x1a0>
	 		 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN12;
 80008ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d2:	81bb      	strh	r3, [r7, #12]
	 		 	PINCFG.GPIO_MODE = GPIO_MODE_FLOATING;
 80008d4:	2301      	movs	r3, #1
 80008d6:	73bb      	strb	r3, [r7, #14]
	 			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 80008d8:	2301      	movs	r3, #1
 80008da:	73fb      	strb	r3, [r7, #15]
	 			MCAL_GPIO_INIT(GPIOB, &PINCFG);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	481b      	ldr	r0, [pc, #108]	; (8000950 <MCAL_SPI_GPIO_SETPIN+0x208>)
 80008e4:	f7ff fdb3 	bl	800044e <MCAL_GPIO_INIT>
			 	 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN13;
 80008e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ec:	81bb      	strh	r3, [r7, #12]
					PINCFG.GPIO_MODE = GPIO_MODE_FLOATING;
 80008ee:	2301      	movs	r3, #1
 80008f0:	73bb      	strb	r3, [r7, #14]
					PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 80008f2:	2301      	movs	r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_INIT(GPIOB, &PINCFG);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4814      	ldr	r0, [pc, #80]	; (8000950 <MCAL_SPI_GPIO_SETPIN+0x208>)
 80008fe:	f7ff fda6 	bl	800044e <MCAL_GPIO_INIT>
			 	 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN14;
 8000902:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000906:	81bb      	strh	r3, [r7, #12]
					PINCFG.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL;
 8000908:	2306      	movs	r3, #6
 800090a:	73bb      	strb	r3, [r7, #14]
					PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 800090c:	2301      	movs	r3, #1
 800090e:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_INIT(GPIOB, &PINCFG);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4619      	mov	r1, r3
 8000916:	480e      	ldr	r0, [pc, #56]	; (8000950 <MCAL_SPI_GPIO_SETPIN+0x208>)
 8000918:	f7ff fd99 	bl	800044e <MCAL_GPIO_INIT>
				 	PINCFG.GPIO_PIN_NUMBER = GPIO_PIN15;
 800091c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000920:	81bb      	strh	r3, [r7, #12]
					PINCFG.GPIO_MODE = GPIO_MODE_FLOATING;
 8000922:	2301      	movs	r3, #1
 8000924:	73bb      	strb	r3, [r7, #14]
					PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 8000926:	2301      	movs	r3, #1
 8000928:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_INIT(GPIOB, &PINCFG);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <MCAL_SPI_GPIO_SETPIN+0x208>)
 8000932:	f7ff fd8c 	bl	800044e <MCAL_GPIO_INIT>
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40013000 	.word	0x40013000
 8000944:	2000001c 	.word	0x2000001c
 8000948:	40010800 	.word	0x40010800
 800094c:	40003c00 	.word	0x40003c00
 8000950:	40010c00 	.word	0x40010c00

08000954 <MCAL_SPI_TX_RX>:
 * PARAM1[IN]----> CONFIG ALL UART CONFIGURATION
 * RETAVAL	 ----> POSITION IN CR REGISTER
 * NOTE		 ----> SUPPORT ASYNC WITH CLCK OUT 8MHZ
 *
 */
void MCAL_SPI_TX_RX(SPI_Typedef *SPIx, uint16_t *PTX_BUFFER,enum POLLING_MECHASIM POLLINGEN ){
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	4613      	mov	r3, r2
 8000960:	71fb      	strb	r3, [r7, #7]

	if(POLLINGEN == POLLING_ENABLE)
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d106      	bne.n	8000976 <MCAL_SPI_TX_RX+0x22>
	while(!((SPIx)->SR & SPI_SR_TXE));
 8000968:	bf00      	nop
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0f9      	beq.n	800096a <MCAL_SPI_TX_RX+0x16>
	SPIx->DR = *PTX_BUFFER;
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	60da      	str	r2, [r3, #12]

	if(POLLINGEN == POLLING_ENABLE)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d106      	bne.n	8000994 <MCAL_SPI_TX_RX+0x40>
	while(!((SPIx)->SR & SPI_SR_RXNE));
 8000986:	bf00      	nop
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0f9      	beq.n	8000988 <MCAL_SPI_TX_RX+0x34>
	*PTX_BUFFER = SPIx->DR ;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	b29a      	uxth	r2, r3
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	801a      	strh	r2, [r3, #0]


}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <SPI1_IRQHandler>:


/*========================================IRQ================================*/
void SPI1_IRQHandler (void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC;
	IRQ_SRC.TXE = ((SPI1->SR & (1<<1)) >> 1);
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <SPI1_IRQHandler+0x54>)
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	085b      	lsrs	r3, r3, #1
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	793b      	ldrb	r3, [r7, #4]
 80009bc:	f362 0300 	bfi	r3, r2, #0, #1
 80009c0:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <SPI1_IRQHandler+0x54>)
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	793b      	ldrb	r3, [r7, #4]
 80009ce:	f362 0341 	bfi	r3, r2, #1, #1
 80009d2:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <SPI1_IRQHandler+0x54>)
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	091b      	lsrs	r3, r3, #4
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	793b      	ldrb	r3, [r7, #4]
 80009e2:	f362 0382 	bfi	r3, r2, #2, #1
 80009e6:	713b      	strb	r3, [r7, #4]




	SPI_GLOBAL[SPI1_INDEX]->P_IRQ_CALLBACK (IRQ_SRC);
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <SPI1_IRQHandler+0x58>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	7938      	ldrb	r0, [r7, #4]
 80009f0:	4798      	blx	r3

}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40013000 	.word	0x40013000
 8000a00:	2000001c 	.word	0x2000001c

08000a04 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC;
	IRQ_SRC.TXE = ((SPI2->SR & (1<<1)) >> 1);
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <SPI2_IRQHandler+0x54>)
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	085b      	lsrs	r3, r3, #1
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	793b      	ldrb	r3, [r7, #4]
 8000a18:	f362 0300 	bfi	r3, r2, #0, #1
 8000a1c:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <SPI2_IRQHandler+0x54>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	793b      	ldrb	r3, [r7, #4]
 8000a2a:	f362 0341 	bfi	r3, r2, #1, #1
 8000a2e:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <SPI2_IRQHandler+0x54>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	091b      	lsrs	r3, r3, #4
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	793b      	ldrb	r3, [r7, #4]
 8000a3e:	f362 0382 	bfi	r3, r2, #2, #1
 8000a42:	713b      	strb	r3, [r7, #4]


		SPI_GLOBAL[SPI2_INDEX]->P_IRQ_CALLBACK (IRQ_SRC);
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SPI2_IRQHandler+0x58>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	7938      	ldrb	r0, [r7, #4]
 8000a4c:	4798      	blx	r3
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40003c00 	.word	0x40003c00
 8000a5c:	2000001c 	.word	0x2000001c

08000a60 <MCAL_USART_INIT>:
 * PARAM1[IN]----> CONFIG ALL UART CONFIGURATION
 * RETAVAL	 ----> POSITION IN CR REGISTER
 * NOTE		 ----> SUPPORT ASYNC WITH CLCK OUT 8MHZ
 *
 */
void MCAL_USART_INIT(USART_Typedef *USARTx ,USART_CONFIG *USART_CONFIG ){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]

	uint32_t PCLCK , BRR;

	GLOBAL_UART_CONFIG=USART_CONFIG;		//PREVENT AS BACKUP IF FUNCTION NEED INFORMATIO
 8000a6a:	4a59      	ldr	r2, [pc, #356]	; (8000bd0 <MCAL_USART_INIT+0x170>)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	6013      	str	r3, [r2, #0]

	//ENABLE CLOCK FOR UART
	if(USARTx==USART1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a58      	ldr	r2, [pc, #352]	; (8000bd4 <MCAL_USART_INIT+0x174>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d106      	bne.n	8000a86 <MCAL_USART_INIT+0x26>
		RCC_USART1_CLK_EN();
 8000a78:	4b57      	ldr	r3, [pc, #348]	; (8000bd8 <MCAL_USART_INIT+0x178>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a56      	ldr	r2, [pc, #344]	; (8000bd8 <MCAL_USART_INIT+0x178>)
 8000a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	e014      	b.n	8000ab0 <MCAL_USART_INIT+0x50>
	else if(USARTx==USART2)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a54      	ldr	r2, [pc, #336]	; (8000bdc <MCAL_USART_INIT+0x17c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d106      	bne.n	8000a9c <MCAL_USART_INIT+0x3c>
		RCC_USART2_CLK_EN();
 8000a8e:	4b52      	ldr	r3, [pc, #328]	; (8000bd8 <MCAL_USART_INIT+0x178>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a51      	ldr	r2, [pc, #324]	; (8000bd8 <MCAL_USART_INIT+0x178>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	e009      	b.n	8000ab0 <MCAL_USART_INIT+0x50>
	else if(USARTx==USART3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a50      	ldr	r2, [pc, #320]	; (8000be0 <MCAL_USART_INIT+0x180>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d105      	bne.n	8000ab0 <MCAL_USART_INIT+0x50>
		RCC_USART3_CLK_EN();
 8000aa4:	4b4c      	ldr	r3, [pc, #304]	; (8000bd8 <MCAL_USART_INIT+0x178>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a4b      	ldr	r2, [pc, #300]	; (8000bd8 <MCAL_USART_INIT+0x178>)
 8000aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aae:	6193      	str	r3, [r2, #24]

	//ENABLE USART MODULE FROM CR1 REGISTER BIT 13
	USARTx->CR1 |= 1<<13;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	60da      	str	r2, [r3, #12]

	//ENABLE TX RX MODE SET BIT 2 OR 3 OR EACH FROM CR1 REGISTER
	USARTx->CR1 |= USART_CONFIG->USART_MODE;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	7812      	ldrb	r2, [r2, #0]
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	60da      	str	r2, [r3, #12]

	//CHOOSE THE PAYLOAD LENGTH SETBIT 13 FROM CR1 REGISTER
	USARTx->CR1 |= USART_CONFIG->USART_PAYLOAD_LENGHTH;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	7a12      	ldrb	r2, [r2, #8]
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	60da      	str	r2, [r3, #12]

	//CONFIGURE PARITY CTRL SET BIT 9 FROM CR1 REGISTER
	USARTx->CR1 |= USART_CONFIG->USART_PARITY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	7a52      	ldrb	r2, [r2, #9]
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60da      	str	r2, [r3, #12]

	//CONFIGURE NUMBER OF STOP BITS SET BIT 12,13 FROM CR2 REGISTER
	USARTx->CR2 |= USART_CONFIG->USART_STOPBITS;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	7a92      	ldrb	r2, [r2, #10]
 8000aee:	431a      	orrs	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	611a      	str	r2, [r3, #16]

	//USED OF FLOW CTRL
	USARTx->CR3 |= USART_CONFIG->USART_FLOWCTL;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	7ad2      	ldrb	r2, [r2, #11]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	615a      	str	r2, [r3, #20]

	//CONFIGURE BAUD RATE (PCLCK1 --> USART2,3    PCLCK2--> USART1)

	if(USARTx==USART1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a33      	ldr	r2, [pc, #204]	; (8000bd4 <MCAL_USART_INIT+0x174>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d103      	bne.n	8000b12 <MCAL_USART_INIT+0xb2>
		PCLCK=MCAL_RCC_PCLCK2_GETFREQ();
 8000b0a:	f7ff fd7d 	bl	8000608 <MCAL_RCC_PCLCK2_GETFREQ>
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	e002      	b.n	8000b18 <MCAL_USART_INIT+0xb8>
	else
		PCLCK=MCAL_RCC_PCLCK1_GETFREQ();
 8000b12:	f7ff fd65 	bl	80005e0 <MCAL_RCC_PCLCK1_GETFREQ>
 8000b16:	60f8      	str	r0, [r7, #12]

	BRR=UART_BRR_Register(PCLCK,USART_CONFIG->USART_BAUDRATE);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b24:	0119      	lsls	r1, r3, #4
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	009a      	lsls	r2, r3, #2
 8000b30:	441a      	add	r2, r3
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	011b      	lsls	r3, r3, #4
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b48:	2064      	movs	r0, #100	; 0x64
 8000b4a:	fb00 f303 	mul.w	r3, r0, r3
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	4a24      	ldr	r2, [pc, #144]	; (8000be4 <MCAL_USART_INIT+0x184>)
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
 8000b58:	095b      	lsrs	r3, r3, #5
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	430b      	orrs	r3, r1
 8000b60:	60bb      	str	r3, [r7, #8]
	USARTx->BRR=BRR;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	609a      	str	r2, [r3, #8]

	//ENABLE , DISABLE INTURREPT
	if(USART_CONFIG->USART_IRQHANDLER |= USART_IRQ_ENABLE_NVIC)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	7b1a      	ldrb	r2, [r3, #12]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	731a      	strb	r2, [r3, #12]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	7b1b      	ldrb	r3, [r3, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <MCAL_USART_INIT+0x126>
		USARTx->CR1 |= USART_CONFIG->USART_IRQHANDLER;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	7b12      	ldrb	r2, [r2, #12]
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60da      	str	r2, [r3, #12]
	//ENABLE NVIC
	if(USARTx==USART1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MCAL_USART_INIT+0x174>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d106      	bne.n	8000b9c <MCAL_USART_INIT+0x13c>
		NVIC_IRQ37_EUSART1_ENABLE;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MCAL_USART_INIT+0x188>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MCAL_USART_INIT+0x188>)
 8000b94:	f043 0320 	orr.w	r3, r3, #32
 8000b98:	6013      	str	r3, [r2, #0]
	else if(USARTx==USART3)
		NVIC_IRQ39_EUSART3_ENABLE;



}
 8000b9a:	e014      	b.n	8000bc6 <MCAL_USART_INIT+0x166>
	else if(USARTx==USART2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <MCAL_USART_INIT+0x17c>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d106      	bne.n	8000bb2 <MCAL_USART_INIT+0x152>
		NVIC_IRQ38_EUSART2_ENABLE;
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MCAL_USART_INIT+0x188>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <MCAL_USART_INIT+0x188>)
 8000baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	e009      	b.n	8000bc6 <MCAL_USART_INIT+0x166>
	else if(USARTx==USART3)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <MCAL_USART_INIT+0x180>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d105      	bne.n	8000bc6 <MCAL_USART_INIT+0x166>
		NVIC_IRQ39_EUSART3_ENABLE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MCAL_USART_INIT+0x188>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <MCAL_USART_INIT+0x188>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	6013      	str	r3, [r2, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000024 	.word	0x20000024
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40004400 	.word	0x40004400
 8000be0:	40004800 	.word	0x40004800
 8000be4:	51eb851f 	.word	0x51eb851f
 8000be8:	e000e104 	.word	0xe000e104

08000bec <MCAL_USART_GPIO_SETPIN>:
 * PARAM1[IN]----> USART X WHICH X CAN BE 1,2,3
 * RETAVAL	 ---->NONE
 * NOTE		 ----> NONE
 *
 */
void MCAL_USART_GPIO_SETPIN(USART_Typedef *USARTx ){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

	GPIO_PINCONFIG_T PINCFG ;

		if ( USARTx == USART1 )
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a2b      	ldr	r2, [pc, #172]	; (8000ca4 <MCAL_USART_GPIO_SETPIN+0xb8>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d118      	bne.n	8000c2e <MCAL_USART_GPIO_SETPIN+0x42>
			//PA10 RX
			//PA11 CTS
			//PA12 RTS

			//PA9 TX
			PINCFG.GPIO_PIN_NUMBER = GPIO_PIN9;
 8000bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c00:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL;
 8000c02:	2306      	movs	r3, #6
 8000c04:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOA, &PINCFG);
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4825      	ldr	r0, [pc, #148]	; (8000ca8 <MCAL_USART_GPIO_SETPIN+0xbc>)
 8000c12:	f7ff fc1c 	bl	800044e <MCAL_GPIO_INIT>

			//PA10 RX
			PINCFG.GPIO_PIN_NUMBER = GPIO_PIN10;
 8000c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1a:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_FLOATING;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOA, &PINCFG);
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	4820      	ldr	r0, [pc, #128]	; (8000ca8 <MCAL_USART_GPIO_SETPIN+0xbc>)
 8000c28:	f7ff fc11 	bl	800044e <MCAL_GPIO_INIT>
				MCAL_GPIO_INIT(GPIOB, &PINCFG);

			}
		}

}
 8000c2c:	e036      	b.n	8000c9c <MCAL_USART_GPIO_SETPIN+0xb0>
		else if ( USARTx == USART2 )
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <MCAL_USART_GPIO_SETPIN+0xc0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d116      	bne.n	8000c64 <MCAL_USART_GPIO_SETPIN+0x78>
			PINCFG.GPIO_PIN_NUMBER = GPIO_PIN2;
 8000c36:	2304      	movs	r3, #4
 8000c38:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL;
 8000c3a:	2306      	movs	r3, #6
 8000c3c:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOA, &PINCFG);
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	4619      	mov	r1, r3
 8000c48:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <MCAL_USART_GPIO_SETPIN+0xbc>)
 8000c4a:	f7ff fc00 	bl	800044e <MCAL_GPIO_INIT>
			PINCFG.GPIO_PIN_NUMBER = GPIO_PIN3;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000c52:	2308      	movs	r3, #8
 8000c54:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOA, &PINCFG);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <MCAL_USART_GPIO_SETPIN+0xbc>)
 8000c5e:	f7ff fbf6 	bl	800044e <MCAL_GPIO_INIT>
}
 8000c62:	e01b      	b.n	8000c9c <MCAL_USART_GPIO_SETPIN+0xb0>
		else if ( USARTx == USART3 )
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <MCAL_USART_GPIO_SETPIN+0xc4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d117      	bne.n	8000c9c <MCAL_USART_GPIO_SETPIN+0xb0>
			PINCFG.GPIO_PIN_NUMBER = GPIO_PIN10;
 8000c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c70:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL;
 8000c72:	2306      	movs	r3, #6
 8000c74:	73bb      	strb	r3, [r7, #14]
			PINCFG.GPIO_SPEED_OUTPUT = GPIO_SPEED_10M;
 8000c76:	2301      	movs	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOB, &PINCFG);
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <MCAL_USART_GPIO_SETPIN+0xc8>)
 8000c82:	f7ff fbe4 	bl	800044e <MCAL_GPIO_INIT>
			PINCFG.GPIO_PIN_NUMBER = GPIO_PIN11;
 8000c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c8a:	81bb      	strh	r3, [r7, #12]
			PINCFG.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOB, &PINCFG);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <MCAL_USART_GPIO_SETPIN+0xc8>)
 8000c98:	f7ff fbd9 	bl	800044e <MCAL_GPIO_INIT>
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40013800 	.word	0x40013800
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	40004400 	.word	0x40004400
 8000cb0:	40004800 	.word	0x40004800
 8000cb4:	40010c00 	.word	0x40010c00

08000cb8 <MCAL_USART_SEND>:
 * PARAM3[IN]----> ENABLE OR DISABLE POLLING
 * RETAVAL	 ----> NONE
 * NOTE		 ----> EACH PIN HAVE 4 BIT IN CR REGISTER
 *
 */
void MCAL_USART_SEND(USART_Typedef *USARTx, uint16_t *PTX_BUFFER,enum POLLING_MECHANISM POLLINGEN ){
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	71fb      	strb	r3, [r7, #7]
	//IF USER OPEN POLLING MECHANISM WE WILL POLL IT
	if(POLLINGEN== enable){
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d106      	bne.n	8000cda <MCAL_USART_SEND+0x22>
		while(!(USARTx->SR & 1<<7));
 8000ccc:	bf00      	nop
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f9      	beq.n	8000cce <MCAL_USART_SEND+0x16>
	because it is replaced by the parity*/
	if(GLOBAL_UART_CONFIG->USART_PAYLOAD_LENGHTH == USART_PAYLOAD_LENGHTH9B){
		USARTx->DR =(*PTX_BUFFER & (uint16_t)0x01FF);
	}
	else
		USARTx->DR =(*PTX_BUFFER & (uint8_t)0x0FF);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	605a      	str	r2, [r3, #4]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
	...

08000cf0 <MCAL_USART_RECIEVE>:
 * PARAM1[IN]---->  USART X WHICH X CAN BE 1,2,3
 * RETAVAL	 ----> NONE
 * NOTE		 ----> EACH PIN HAVE 4 BIT IN CR REGISTER
 *
 */
void MCAL_USART_RECIEVE(USART_Typedef *USARTx, uint16_t *PRX_BUFFER,enum POLLING_MECHANISM POLLINGEN ){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	71fb      	strb	r3, [r7, #7]

	//LOOP OVER UNTIL LEN OF NUMBER ARE TRANSFERRED
		//WAIT UNTIL RXNE FLAG SET IN SR REGISTER
		if (POLLINGEN == enable)
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d106      	bne.n	8000d12 <MCAL_USART_RECIEVE+0x22>
		{
			while( ! (USARTx->SR & 1<<5 ));
 8000d04:	bf00      	nop
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0320 	and.w	r3, r3, #32
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0f9      	beq.n	8000d06 <MCAL_USART_RECIEVE+0x16>
			}

		}else
		{
			//8 BIT DATA
			if (GLOBAL_UART_CONFIG->USART_PARITY ==USART_PARITY_NONE)
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <MCAL_USART_RECIEVE+0x58>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	7a5b      	ldrb	r3, [r3, #9]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d107      	bne.n	8000d2c <MCAL_USART_RECIEVE+0x3c>
			{
				//NO PARITY ----> 8B IS ALL DATA
				*((uint16_t*) PRX_BUFFER) = ( USARTx->DR  & (uint8_t)0xFF ) ;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	801a      	strh	r2, [r3, #0]
				*((uint16_t*) PRX_BUFFER) = ( USARTx->DR  & (uint8_t)0X7F );

			}
		}

}
 8000d2a:	e007      	b.n	8000d3c <MCAL_USART_RECIEVE+0x4c>
				*((uint16_t*) PRX_BUFFER) = ( USARTx->DR  & (uint8_t)0X7F );
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	801a      	strh	r2, [r3, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000024 	.word	0x20000024

08000d4c <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

	GLOBAL_UART_CONFIG->P_IRQ_CALLBACK() ;
 8000d50:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <USART1_IRQHandler+0x10>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	4798      	blx	r3

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000024 	.word	0x20000024

08000d60 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	GLOBAL_UART_CONFIG->P_IRQ_CALLBACK() ;
 8000d64:	4b02      	ldr	r3, [pc, #8]	; (8000d70 <USART2_IRQHandler+0x10>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	4798      	blx	r3

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000024 	.word	0x20000024

08000d74 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	GLOBAL_UART_CONFIG->P_IRQ_CALLBACK () ;
 8000d78:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <USART3_IRQHandler+0x10>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	4798      	blx	r3


}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000024 	.word	0x20000024

08000d88 <Clock_init>:
#include "STM103C6_HEADERS.H"


unsigned int CH;

void Clock_init(){
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	//ENABLE CLOCK GPIOA
	RCC_GPIOA_CLK_EN();
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <Clock_init+0x30>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <Clock_init+0x30>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6193      	str	r3, [r2, #24]
	//ENABLE CLOCK GPIOB
	RCC_GPIOB_CLK_EN();
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <Clock_init+0x30>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <Clock_init+0x30>)
 8000d9e:	f043 0308 	orr.w	r3, r3, #8
 8000da2:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN();
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <Clock_init+0x30>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <Clock_init+0x30>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6193      	str	r3, [r2, #24]


}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000

08000dbc <SPI_IRQ_Callback>:
	wait_ms(1000);
}

*/

void SPI_IRQ_Callback(struct S_IRQ_SRC IRQ_SRC){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	7138      	strb	r0, [r7, #4]

#ifdef MCU_AS_SLAVE

	if(IRQ_SRC.RXNE){
 8000dc4:	793b      	ldrb	r3, [r7, #4]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00c      	beq.n	8000dea <SPI_IRQ_Callback+0x2e>
		CH=0xf;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <SPI_IRQ_Callback+0x38>)
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	601a      	str	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI1,&CH,POLLING_DISABLE);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4906      	ldr	r1, [pc, #24]	; (8000df4 <SPI_IRQ_Callback+0x38>)
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <SPI_IRQ_Callback+0x3c>)
 8000ddc:	f7ff fdba 	bl	8000954 <MCAL_SPI_TX_RX>
		MCAL_USART_SEND(USART1, &CH, enable);
 8000de0:	2200      	movs	r2, #0
 8000de2:	4904      	ldr	r1, [pc, #16]	; (8000df4 <SPI_IRQ_Callback+0x38>)
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <SPI_IRQ_Callback+0x40>)
 8000de6:	f7ff ff67 	bl	8000cb8 <MCAL_USART_SEND>
	}

#endif


}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000064 	.word	0x20000064
 8000df8:	40013000 	.word	0x40013000
 8000dfc:	40013800 	.word	0x40013800

08000e00 <UART_IRQ_Callback>:
void UART_IRQ_Callback (void){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	MCAL_USART_RECIEVE(USART1, &CH, disable);
 8000e04:	2201      	movs	r2, #1
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <UART_IRQ_Callback+0x3c>)
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <UART_IRQ_Callback+0x40>)
 8000e0a:	f7ff ff71 	bl	8000cf0 <MCAL_USART_RECIEVE>
	MCAL_USART_SEND(USART1, &CH, enable);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	490a      	ldr	r1, [pc, #40]	; (8000e3c <UART_IRQ_Callback+0x3c>)
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <UART_IRQ_Callback+0x40>)
 8000e14:	f7ff ff50 	bl	8000cb8 <MCAL_USART_SEND>

	//SPI
	MCAL_GPIO_WRITEPIN(GPIOA, GPIO_PIN4, 0);		//TO MAKE SLAVE EQUAL 0
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <UART_IRQ_Callback+0x44>)
 8000e1e:	f7ff fb95 	bl	800054c <MCAL_GPIO_WRITEPIN>
	MCAL_SPI_TX_RX(SPI1, &CH, POLLING_ENABLE);
 8000e22:	2200      	movs	r2, #0
 8000e24:	4905      	ldr	r1, [pc, #20]	; (8000e3c <UART_IRQ_Callback+0x3c>)
 8000e26:	4808      	ldr	r0, [pc, #32]	; (8000e48 <UART_IRQ_Callback+0x48>)
 8000e28:	f7ff fd94 	bl	8000954 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WRITEPIN(GPIOA, GPIO_PIN4, 1);		//TO MAKE SLAVE EQUAL 1
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2110      	movs	r1, #16
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <UART_IRQ_Callback+0x44>)
 8000e32:	f7ff fb8b 	bl	800054c <MCAL_GPIO_WRITEPIN>


}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000064 	.word	0x20000064
 8000e40:	40013800 	.word	0x40013800
 8000e44:	40010800 	.word	0x40010800
 8000e48:	40013000 	.word	0x40013000

08000e4c <main>:
int main(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af00      	add	r7, sp, #0
	Clock_init();
 8000e52:	f7ff ff99 	bl	8000d88 <Clock_init>
	USART_CONFIG uartCFG ;
	uartCFG.USART_BAUDRATE = USART_BAUDRATE_115200 ;
 8000e56:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e5a:	623b      	str	r3, [r7, #32]
	uartCFG.USART_FLOWCTL = USART_FLOWCTL_NONE ;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uartCFG.USART_IRQHANDLER = USART_IRQ_ENABLE_RXNE ;
 8000e62:	2320      	movs	r3, #32
 8000e64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uartCFG.P_IRQ_CALLBACK =UART_IRQ_Callback ;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <main+0x84>)
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartCFG.USART_PARITY=USART_PARITY_NONE ;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uartCFG.USART_PAYLOAD_LENGHTH = USART_PAYLOAD_LENGHTH8B;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uartCFG.USART_STOPBITS = USART_STOPBITS_ONE ;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uartCFG.USART_MODE = USART_MODE_TX_RX ;
 8000e7e:	230c      	movs	r3, #12
 8000e80:	773b      	strb	r3, [r7, #28]

	MCAL_USART_INIT(USART1, &uartCFG);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <main+0x88>)
 8000e8a:	f7ff fde9 	bl	8000a60 <MCAL_USART_INIT>
	MCAL_USART_GPIO_SETPIN(USART1);
 8000e8e:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <main+0x88>)
 8000e90:	f7ff feac 	bl	8000bec <MCAL_USART_GPIO_SETPIN>


	//FOR SPI COMMON

	SPI_CONFIG SPICFG;
	SPICFG.SPI_CLCK_POLARITY= SPI_POLARITY_HIGH;
 8000e94:	2302      	movs	r3, #2
 8000e96:	81bb      	strh	r3, [r7, #12]
	SPICFG.SPI__CLCK_PHASE = SPI_PHASE_2ST;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	81fb      	strh	r3, [r7, #14]
	SPICFG.SPI_DATA_SIZE = SPI_8BIT_DATA;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	817b      	strh	r3, [r7, #10]
	SPICFG.SPI_FRAME_FORMAT = SPI_MSB;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	813b      	strh	r3, [r7, #8]
	SPICFG.SPI_BAUDRATE = SPI_BAUDRATE_PRESC8;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	827b      	strh	r3, [r7, #18]
	SPICFG.SPI_COMMUNICATION_MODE = SPI_2LINE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	80fb      	strh	r3, [r7, #6]

#endif


#ifdef MCU_AS_SLAVE
	SPICFG.SPI_DEVICE_MODE=SPI_SLAVE_MODE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	80bb      	strh	r3, [r7, #4]
	SPICFG.SPI_IRQ_ENABLE=SPI_IRQ_EN_RXNEIE;
 8000eb0:	2340      	movs	r3, #64	; 0x40
 8000eb2:	82bb      	strh	r3, [r7, #20]
	SPICFG.SPI_NSS=SPI_NSS_HW_SLAVE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	823b      	strh	r3, [r7, #16]
	SPICFG.P_IRQ_CALLBACK=SPI_IRQ_Callback;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <main+0x8c>)
 8000eba:	61bb      	str	r3, [r7, #24]

#endif



	MCAL_SPI_INIT(SPI1, &SPICFG);
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4806      	ldr	r0, [pc, #24]	; (8000edc <main+0x90>)
 8000ec2:	f7ff fbb5 	bl	8000630 <MCAL_SPI_INIT>
	MCAL_SPI_GPIO_SETPIN(SPI1);
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <main+0x90>)
 8000ec8:	f7ff fc3e 	bl	8000748 <MCAL_SPI_GPIO_SETPIN>



	while(1){
 8000ecc:	e7fe      	b.n	8000ecc <main+0x80>
 8000ece:	bf00      	nop
 8000ed0:	08000e01 	.word	0x08000e01
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	08000dbd 	.word	0x08000dbd
 8000edc:	40013000 	.word	0x40013000

08000ee0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ee2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ee4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	; (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	; (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f0e:	f000 f811 	bl	8000f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f12:	f7ff ff9b 	bl	8000e4c <main>

08000f16 <LoopForever>:

LoopForever:
    b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
  ldr   r0, =_estack
 8000f18:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f24:	08000fb8 	.word	0x08000fb8
  ldr r2, =_sbss
 8000f28:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f2c:	20000068 	.word	0x20000068

08000f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_2_IRQHandler>
	...

08000f34 <__libc_init_array>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	2500      	movs	r5, #0
 8000f38:	4e0c      	ldr	r6, [pc, #48]	; (8000f6c <__libc_init_array+0x38>)
 8000f3a:	4c0d      	ldr	r4, [pc, #52]	; (8000f70 <__libc_init_array+0x3c>)
 8000f3c:	1ba4      	subs	r4, r4, r6
 8000f3e:	10a4      	asrs	r4, r4, #2
 8000f40:	42a5      	cmp	r5, r4
 8000f42:	d109      	bne.n	8000f58 <__libc_init_array+0x24>
 8000f44:	f000 f81a 	bl	8000f7c <_init>
 8000f48:	2500      	movs	r5, #0
 8000f4a:	4e0a      	ldr	r6, [pc, #40]	; (8000f74 <__libc_init_array+0x40>)
 8000f4c:	4c0a      	ldr	r4, [pc, #40]	; (8000f78 <__libc_init_array+0x44>)
 8000f4e:	1ba4      	subs	r4, r4, r6
 8000f50:	10a4      	asrs	r4, r4, #2
 8000f52:	42a5      	cmp	r5, r4
 8000f54:	d105      	bne.n	8000f62 <__libc_init_array+0x2e>
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f5c:	4798      	blx	r3
 8000f5e:	3501      	adds	r5, #1
 8000f60:	e7ee      	b.n	8000f40 <__libc_init_array+0xc>
 8000f62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f66:	4798      	blx	r3
 8000f68:	3501      	adds	r5, #1
 8000f6a:	e7f2      	b.n	8000f52 <__libc_init_array+0x1e>
 8000f6c:	08000fb0 	.word	0x08000fb0
 8000f70:	08000fb0 	.word	0x08000fb0
 8000f74:	08000fb0 	.word	0x08000fb0
 8000f78:	08000fb4 	.word	0x08000fb4

08000f7c <_init>:
 8000f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7e:	bf00      	nop
 8000f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f82:	bc08      	pop	{r3}
 8000f84:	469e      	mov	lr, r3
 8000f86:	4770      	bx	lr

08000f88 <_fini>:
 8000f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8a:	bf00      	nop
 8000f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8e:	bc08      	pop	{r3}
 8000f90:	469e      	mov	lr, r3
 8000f92:	4770      	bx	lr
