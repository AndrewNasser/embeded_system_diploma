/*
 * STM32F103C6_USART_DRIVER.h
 *
 *  Created on: Jul 7, 2023
 *      Author: King 45M
 */

#ifndef INC_STM32F103C6_USART_DRIVER_H_
#define INC_STM32F103C6_USART_DRIVER_H_
#include "STM103C6_HEADERS.H"

typedef struct{
	uint8_t	  USART_MODE; 					//SPECIFIC AS TX/RX ACCORDING FROM REFERNCE MACROS
	uint32_t  USART_BAUDRATE; 				//SPECIFIC AS SPEED ACCORDING FROM REFERNCE MACROS
	uint8_t   USART_PAYLOAD_LENGHTH; 		//SPECIFIC AS LENGTH ACCORDING FROM REFERNCE MACROS
	uint8_t   USART_PARITY; 				//SPECIFIC AS ERROR DETECTION  ACCORDING FROM REFERNCE MACROS(EVEN-ODD-NONE)
	uint8_t   USART_STOPBITS; 				//SPECIFIC AS STOP BIT FOR FRAME  ACCORDING FROM REFERNCE MACROS(.5 , 1 , 1.5 , 2)
	uint8_t   USART_FLOWCTL; 				//SPECIFIC AS CONTROL  ACCORDING FROM REFERNCE MACROS(CTS "CLEAR TO SEND",RTS"REQUEST TO SEND")
	uint8_t   USART_IRQHANDLER; 			//ENABLE OR DISABLE UART IRQ TX/RX

	void(* P_IRQ_CALLBACK)(void);			//FOR ISR CANNOT BE IN APPLICATION BUT IN MCAL (CALL ONCE IRQ HAPPEN)
}USART_CONFIG;




//==******************************REFERENCE MACROS******************************==//
#define USART_MODE_TX		(uint32_t)(1<<3)	//FOR ENABLE USART AS TRANSMITTER ACCORDING TO CR1 REGISTER
#define USART_MODE_RX		(uint32_t)(1<<2)
#define USART_MODE_TX_RX	(uint32_t)(1<<2 | 1<<3)


#define USART_BAUDRATE_2400			2400							//0% ERROR
#define USART_BAUDRATE_9600			9600							//0% ERROR
#define USART_BAUDRATE_19200		19200							//0% ERROR
#define USART_BAUDRATE_57600		57600							//0% ERROR
#define USART_BAUDRATE_115200		115200							//0.15% ERROR
#define USART_BAUDRATE_230400		230400							//0.16% ERROR
#define USART_BAUDRATE_460800		460800							//0.16% ERROR
#define USART_BAUDRATE_921600		921600							//0.16% ERROR
#define USART_BAUDRATE_2250000		2250000							//0% ERROR
#define USART_BAUDRATE_4500000		4500000							//NA ERROR


#define	USART_PAYLOAD_LENGHTH8B		(uint32_t)(0)					//FOR LENGTH 8 BIT
#define	USART_PAYLOAD_LENGHTH9B		(uint32_t)(1<<12)				//FOR LENGTH 9 BIT


#define	USART_PARITY_NONE			(uint32_t)(0)					//FOR NONE PARITY 0 @ CR1 REGISTER BIT 9
#define	USART_PARITY_ODD			(uint32_t)(1<<9 | 1<<10)		//FOR ODD PARITY 0 @ CR1 REGISTER SET BIT 10 FOR ENABLE BIT 9 FOR ODD
#define	USART_PARITY_EVEN			(uint32_t)(1<<10)				//FOR EVEN PARITY 0 @ CR1 REGISTER SET BIT 10 FOR ENABLE , BIT 9=0


#define	USART_STOPBITS_HALF			(uint32_t)(1<<12)				//FOR 0.5 BIT STOP @ CR2 REGISTER
#define	USART_STOPBITS_ONE			(uint32_t)(0)					//FOR 1 BIT STOP @ CR2 REGISTER
#define	USART_STOPBITS_ONEHALF			(uint32_t)(3<<12)				//FOR 1.5 BIT STOP @ CR2 REGISTER
#define	USART_STOPBITS_TWO			(uint32_t)(2<<12)				//FOR 2 BIT STOP @ CR2 REGISTER

#define	USART_FLOWCTL_NONE			(uint32_t)(0)
#define	USART_FLOWCTL_CTS			(uint32_t)(1<<9)				//FOR CLEAR TO SEND @ CR3 REGISTER
#define	USART_FLOWCTL_RTS			(uint32_t)(1<<8)				//FOR REQUEST TO SEND @ CR3 REGISTER
#define	USART_FLOWCTL_RTS_CTS		(uint32_t)(1<<8 | 1<<9)			//FOR EACH @ CR3 REGISTER


#define USART_IRQ_ENABLE_NVIC		(uint32_t)(0)
#define USART_IRQ_ENABLE_PE			(uint32_t)(1<<0)				//FOR ENABLE PARITY ERROR @ CR1 REGISTER SET BIT 0
#define USART_IRQ_ENABLE_ORE		(uint32_t)(1<<3)				//FOR ENABLE OVERRUN ERROR @ CR1 REGISTER SET BIT 3
#define USART_IRQ_ENABLE_IDLE		(uint32_t)(1<<4)				//FOR ENABLE LINE DETECT @ CR1 REGISTER SET BIT 4
#define USART_IRQ_ENABLE_RXNE		(uint32_t)(1<<5)				//FOR ENABLE READ DATA REGISTER NOT EMOTY @ CR1 REGISTER SET BIT 5
#define USART_IRQ_ENABLE_TC			(uint32_t)(1<<6)				//FOR ENABLE TRANSMISSION COMPLETE @ CR1 REGISTER SET BIT 6
#define USART_IRQ_ENABLE_TXE		(uint32_t)(1<<7)				//FOR ENABLE TRANSMITT DATA REGISTER EMPTY @ CR1 REGISTER SET BIT 7
#define USART_IRQ_ENABLE_LBD		(uint32_t)(1<<8)				//FOR ENABLE LIN BREAK DATA REGISTER @ CR1 REGISTER SET BIT 8
#define USART_IRQ_ENABLE_CTS		(uint32_t)(1<<9)				//FOR ENABLE CTS FLAG @ CR1 REGISTER SET BIT 9(AVALIABLE USART4 ,5)


#define USARTDIV(_PCLK_, _BAUD_)							(uint32_t) (_PCLK_/(16 * _BAUD_ ))
#define USARTDIV_MUL100(_PCLK_, _BAUD_)						(uint32_t) ( (25 * _PCLK_ ) / (4  * _BAUD_ ))
#define Mantissa_MUL100(_PCLK_, _BAUD_)						(uint32_t) (USARTDIV(_PCLK_, _BAUD_) * 100)
#define Mantissa(_PCLK_, _BAUD_)							(uint32_t) (USARTDIV(_PCLK_, _BAUD_) )
#define DIV_Fraction(_PCLK_, _BAUD_)						(uint32_t) (((USARTDIV_MUL100(_PCLK_, _BAUD_) -  Mantissa_MUL100(_PCLK_, _BAUD_) ) * 16 ) / 100 )
#define UART_BRR_Register(_PCLK_, _BAUD_)					(( Mantissa (_PCLK_, _BAUD_) ) <<4 )|( (DIV_Fraction(_PCLK_, _BAUD_)) & 0xF )




enum POLLING_MECHANISM{
	enable,
	disable
};


void MCAL_USART_INIT(USART_Typedef *USARTx ,USART_CONFIG *USART_CONFIG );
void MCAL_USART_DEINIT(USART_Typedef *USARTx );
void MCAL_USART_GPIO_SETPIN(USART_Typedef *USARTx );
void MCAL_USART_SEND(USART_Typedef *USARTx, uint16_t *PTX_BUFFER,enum POLLING_MECHANISM POLLINGEN );
void MCAL_USART_RECIEVE(USART_Typedef *USARTx, uint16_t *PRX_BUFFER,enum POLLING_MECHANISM POLLINGEN );
void MCAL_USART_TC(USART_Typedef *USARTx );



#endif /* INC_STM32F103C6_USART_DRIVER_H_ */
