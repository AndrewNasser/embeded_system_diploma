
ATMEGA 32 DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b51  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b2  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046e  00000000  00000000  00001577  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  000019e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000560  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000382  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002472  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_10>
  2c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  8a:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER_OVF_CALLBACK>:
 */ 
#include <HEADERS.h>
extern uint8_t NUM_OVF;

void TIMER_OVF_CALLBACK(){
	PORTA = ~PORTA;
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	80 95       	com	r24
  96:	8b bb       	out	0x1b, r24	; 27
  98:	08 95       	ret

0000009a <main>:
}

int main()
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	00 d0       	rcall	.+0      	; 0xa0 <main+0x6>
  a0:	00 d0       	rcall	.+0      	; 0xa2 <main+0x8>
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	DDRA=0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a bb       	out	0x1a, r24	; 26
	sei();
  aa:	78 94       	sei
	//MCAL_PORT_DIR(DIO_PORTA, DIO_PORT_OUT);
				TIMER0_SETCALLBACK_CMP_INTERRUPT(TIMER_OVF_CALLBACK);
  ac:	89 e4       	ldi	r24, 0x49	; 73
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 a0 00 	call	0x140	; 0x140 <TIMER0_SETCALLBACK_CMP_INTERRUPT>
				TE0_CONFIG_T CONFIG={CTC,OCIE_ENABLE,TOIE_DISABLE,PRESC_CLCK8};
  b4:	88 e0       	ldi	r24, 0x08	; 8
  b6:	89 83       	std	Y+1, r24	; 0x01
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	8a 83       	std	Y+2, r24	; 0x02
  bc:	1b 82       	std	Y+3, r1	; 0x03
  be:	8c 83       	std	Y+4, r24	; 0x04
				TIMER0_SET_CMP_VALUE(0xF0);
  c0:	80 ef       	ldi	r24, 0xF0	; 240
  c2:	0e 94 9d 00 	call	0x13a	; 0x13a <TIMER0_SET_CMP_VALUE>
				TIMER0_INIT(&CONFIG);
  c6:	ce 01       	movw	r24, r28
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	0e 94 68 00 	call	0xd0	; 0xd0 <TIMER0_INIT>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x34>

000000d0 <TIMER0_INIT>:

	
	
}

void TIMER0_SETCALLBACK_OVF_INTERRUPT(PTR_VoidFunVoid_t CALLBACK){
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	79 f1       	breq	.+94     	; 0x132 <TIMER0_INIT+0x62>
  d4:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <TIMER0_CONFIG+0x1>
  d8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TIMER0_CONFIG>
  dc:	fc 01       	movw	r30, r24
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	11 f0       	breq	.+4      	; 0xe8 <TIMER0_INIT+0x18>
  e4:	88 30       	cpi	r24, 0x08	; 8
  e6:	19 f4       	brne	.+6      	; 0xee <TIMER0_INIT+0x1e>
  e8:	93 b7       	in	r25, 0x33	; 51
  ea:	89 2b       	or	r24, r25
  ec:	83 bf       	out	0x33, r24	; 51
  ee:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <TIMER0_CONFIG>
  f2:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <TIMER0_CONFIG+0x1>
  f6:	83 81       	ldd	r24, Z+3	; 0x03
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	18 f4       	brcc	.+6      	; 0x102 <TIMER0_INIT+0x32>
  fc:	93 b7       	in	r25, 0x33	; 51
  fe:	89 2b       	or	r24, r25
 100:	83 bf       	out	0x33, r24	; 51
 102:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <TIMER0_CONFIG>
 106:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <TIMER0_CONFIG+0x1>
 10a:	81 81       	ldd	r24, Z+1	; 0x01
 10c:	88 23       	and	r24, r24
 10e:	11 f0       	breq	.+4      	; 0x114 <TIMER0_INIT+0x44>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	19 f4       	brne	.+6      	; 0x11a <TIMER0_INIT+0x4a>
 114:	99 b7       	in	r25, 0x39	; 57
 116:	89 2b       	or	r24, r25
 118:	89 bf       	out	0x39, r24	; 57
 11a:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <TIMER0_CONFIG>
 11e:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <TIMER0_CONFIG+0x1>
 122:	82 81       	ldd	r24, Z+2	; 0x02
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	38 f4       	brcc	.+14     	; 0x136 <TIMER0_INIT+0x66>
 128:	99 b7       	in	r25, 0x39	; 57
 12a:	89 2b       	or	r24, r25
 12c:	89 bf       	out	0x39, r24	; 57
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 95       	ret
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	08 95       	ret
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	08 95       	ret

0000013a <TIMER0_SET_CMP_VALUE>:
 13a:	8c bf       	out	0x3c, r24	; 60
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	08 95       	ret

00000140 <TIMER0_SETCALLBACK_CMP_INTERRUPT>:
	
}
void TIMER0_SETCALLBACK_CMP_INTERRUPT(PTR_VoidFunVoid_t CALLBACK){
	

		CALLBACK_CMP=CALLBACK;
 140:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 144:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 148:	08 95       	ret

0000014a <__vector_10>:
	
	
	
}

ISR(TIMER0_COMP_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	CALLBACK_CMP();
 16c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 170:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 174:	09 95       	icall
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__vector_11>:
ISR(TIMER0_OVF_vect){
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	3f 93       	push	r19
 1a6:	4f 93       	push	r20
 1a8:	5f 93       	push	r21
 1aa:	6f 93       	push	r22
 1ac:	7f 93       	push	r23
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
	 NUM_OVF++;
 1ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <NUM_OVF>
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <NUM_OVF>
	 CALLBACK_OVF();
 1c4:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <CALLBACK_OVF>
 1c8:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <CALLBACK_OVF+0x1>
 1cc:	09 95       	icall
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
