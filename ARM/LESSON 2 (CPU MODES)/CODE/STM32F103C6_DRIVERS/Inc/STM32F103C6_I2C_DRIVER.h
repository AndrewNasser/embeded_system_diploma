/*
 * STM32F103C6_I2C_DRIVER.h
 *
 *  Created on: Aug 15, 2023
 *      Author: King 45M
 */

#ifndef INC_STM32F103C6_I2C_DRIVER_H_
#define INC_STM32F103C6_I2C_DRIVER_H_

struct S_I2C_SLAVE_DEVICE_ADDRESS{
	uint16_t	DUAL_ADD;
	uint16_t	PRIMARY_SLAVE_ADD;
	uint16_t	SECONDARY_SLAVE_ADD;
	uint32_t	I2C_ADDRESS_SLAVE_MODE; 	//SPECIFIC ADDRESSING OF SLAVE MODE FROM ADREESING MODE MACROS

};

typedef enum
{
	TRANSMITTER,
	RECIEVE
}I2C_DIRECTION;

typedef enum{
	I2C_EV_STOP,
	I2C_ERROR_AF,
	I2C_EV_ADDR_MATCHED,
	I2C_EV_DATA_REQ,
	I2C_DATA_REC
}SLAVE_STATE;

typedef enum
{
	WITH_STOP,
	WITHOUT_STOP
}STOP_STATE;

typedef enum
{
	START,
	REPEATEDSTART
}REPEATED_START;

typedef enum
{
	RESET,
	SET
}FLAG_STATUS;


typedef enum
{
	I2C_BUSY,
	EV5     , // 1: GENERATE THE START CONDITION
	EV6 	, // 1: RECIEVE ADDRESS MATCHED
	EV8_1	, // 1: DATA REGISTER IS EMPTY
	EV8_2	, // 1: DATA BYTE IS TRANSFERRED
	EV7 	, // 1: DR NOT EMPTY
}STATUS;



typedef struct{

	uint32_t	I2C_CLCK_SPEED;				//SPECIFIC SPEED OF MODE FROM SPEED MACROS
	uint32_t	I2C_STRECH_MODE;			//SPECIFIC STRECHING[ENABLE OR DISABLE] FROM STRECH MACROS
	uint32_t	I2C_MODE;					//SPECIFIC MODE[I2C OR SMBUS] FROM I2C MODE MACROS
	uint32_t	I2C_ACK;					//SPECIFIC ACKNOWLEDGE FROM I2C ACK MACROS
	uint32_t	I2C_GENERAL_DETECTION;		//SPECIFIC GENERAL CALL ADDRESS DETECTION
	uint16_t IRQ_EN	;
	uint16_t NUM_ADDRESS_BIT;	 //specified the number of  addressING bit (7 or 10 ) .
	struct S_I2C_SLAVE_DEVICE_ADDRESS	I2C_SLAVE_ADDRESS;
	void (*P_IRQ_CALL)(SLAVE_STATE STATE);			//FOR ISR CANNOT BE IN APPLICATION BUT IN MCAL (CALL ONCE IRQ HAPPEN)

}I2C_CONFIG;



//SPEED MACROS
#define	I2C_CLCK_SM_50K		(0x50000U)			//FOR STANDARD MODE CLCK
#define	I2C_CLCK_SM_100K	(0x50000U)			//FOR STANDARD MODE CLCK
#define	I2C_CLCK_FM_200K	(0x50000U)			//FOR FAST MODE CLCK [NOT SUPPORTED]
#define	I2C_CLCK_FM_400K	(0x50000U)			//FOR FAST MODE CLCK [NOT SUPPORTED]


//STRECH MACROS
#define	I2C_STRECH_ENABLE		(0x00000000U)			//FOR ENABLE
#define	I2C_STRECH_DISABLE		I2C_CR1_NOSTRETCH		//FOR DISABLE  == 1<<7

//I2C MODE MACROS
#define	I2C_MODE_I2C		(0x00000000U)			//FOR I2C MODE
#define	I2C_MODE_SMBUS		I2C_CR1_SMBUS			//FOR SMBUS MODE == 1<<1

//ADREESING MODE MACROS [I2C_OAR1 REGISTER]
#define	I2C_7BIT_SLAVE_MODE_ADD			(0x00000000U)			//FOR 7BIT SLAVE ADDRESSING
#define	I2C_10BIT_SLAVE_MODE_ADD		(uint16_t)(1<<15)		//FOR 10BIT SLAVE ADDRESSING

//I2C ACK MACROS[I2C_CR1 REGISTER]
#define	I2C_ACK_ENABLE		I2C_CR1_ACK				//FOR ACK ENABLE BY SW
#define	I2C_ACK_DISABLE		(0x00000000U)			//FOR NACK


#define	I2C_ENGC_ENABLE			I2C_CR1_ENGC
#define	I2C_ENGC_DISABLE		(0x00000000U)

#define I2C_IRQ_ENABLE_DISABLE 						(uint16_t)(~(7<<5))
#define I2C_IRQ_ENABLE_I2C_EV						(uint16_t)(1<<9)
#define I2C_IRQ_ENABLE_I2C_ER						(uint16_t)(1<<8)

void MCAL_I2C_INIT(I2C_Typedef *I2Cx ,I2C_CONFIG *I2C_INITSTRUCT );
void MCAL_I2C_DEINIT(I2C_Typedef *I2Cx );
void MCAL_I2C_GPIO_SETPIN(I2C_Typedef *I2Cx );
void MCAL_I2C_MASTER_TX(I2C_Typedef *I2Cx , uint16_t ADDRESS , uint8_t* PTXBUFFER , uint32_t DATALEN , STOP_STATE STOP , REPEATED_START START);
void MCAL_I2C_MASTER_RX(I2C_Typedef *I2Cx , uint16_t ADDRESS , uint8_t* PRXBUFFER , uint32_t DATALEN , STOP_STATE STOP , REPEATED_START START);
void I2C_GENERATE_START(I2C_Typedef* I2Cx , REPEATED_START START);
FLAG_STATUS I2C_GET_FLAG_STATUS( I2C_Typedef *I2Cx , STATUS FLAG );
void I2C_SEND_ADDRESS(I2C_Typedef* I2Cx, uint16_t ADDRESS , I2C_DIRECTION DIRECTION);
void I2C_GENERATE_STOP(I2C_Typedef* I2Cx );
void MCAL_I2C_SLAVE_TX(I2C_Typedef *I2Cx ,uint8_t DATA);
uint8_t MCAL_I2C_SLAVE_RX(I2C_Typedef *I2Cx );
void SLAVE_STATUS(I2C_Typedef* I2Cx , SLAVE_STATE STATE);
void I2C_EV_IRQHandler();




#endif /* INC_STM32F103C6_I2C_DRIVER_H_ */

